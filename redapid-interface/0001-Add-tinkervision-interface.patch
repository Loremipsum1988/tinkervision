From d8dfe253785e798de65c378d3a0bd711343c9f53 Mon Sep 17 00:00:00 2001
From: Philipp Kroos <philipp.kroos@fh-bielefeld.de>
Date: Thu, 16 Apr 2015 19:46:08 +0200
Subject: [PATCH] Add tinkervision interface

---
 .gitignore                  |    2 +
 0001-Update-changelog.patch |   23 +
 src/redapid/Makefile        |    8 +-
 src/redapid/api.c           | 1553 ++++++++++++++++++++++++-------------------
 src/redapid/api.h           |    3 +
 src/redapid/api_packet.h    | 1013 ++++++++++++++++------------
 src/redapid/vision.c        |  158 +++++
 src/redapid/vision.h        |   33 +
 8 files changed, 1691 insertions(+), 1102 deletions(-)
 create mode 100644 0001-Update-changelog.patch
 create mode 100644 src/redapid/vision.c
 create mode 100644 src/redapid/vision.h

diff --git a/.gitignore b/.gitignore
index c169faf..796545c 100644
--- a/.gitignore
+++ b/.gitignore
@@ -3,3 +3,5 @@
 src/daemonlib
 src/redapid/dist
 src/redapid/redapid
+
+*~
diff --git a/0001-Update-changelog.patch b/0001-Update-changelog.patch
new file mode 100644
index 0000000..340e376
--- /dev/null
+++ b/0001-Update-changelog.patch
@@ -0,0 +1,23 @@
+From f9e627e50095b4f9f53b89cf7e36dd380a22a887 Mon Sep 17 00:00:00 2001
+From: Matthias Bolte <matthias@tinkerforge.com>
+Date: Mon, 2 Feb 2015 14:28:55 +0100
+Subject: [PATCH] Update changelog
+
+---
+ changelog | 4 +++-
+ 1 file changed, 3 insertions(+), 1 deletion(-)
+
+diff --git a/changelog b/changelog
+index d4edde9..657c4f5 100644
+--- a/changelog
++++ b/changelog
+@@ -1,3 +1,5 @@
+ 2.0.0: Initial version
+ 2.0.1: Add debug filter to fine-tune debug output
+-       Adapt X11 detection to new dynamic full image
++       Adapt X11 detection to changes in image version 1.4
++       Use redapid version as RED Brick firmware version
++       Don't send packet twice after partial write
+-- 
+2.1.4
+
diff --git a/src/redapid/Makefile b/src/redapid/Makefile
index 5790b06..4c73d11 100644
--- a/src/redapid/Makefile
+++ b/src/redapid/Makefile
@@ -97,7 +97,8 @@ SOURCES += ../daemonlib/io.c \
            program_scheduler.c \
            session.c \
            socat.c \
-           string.c
+           string.c \
+           vision.c
 
 OBJECTS := ${SOURCES:.c=.o}
 DEPENDS := ${SOURCES:.c=.p}
@@ -123,6 +124,11 @@ LDFLAGS += -pthread
 # link with -lrt for clock_gettime (RED Brick doesn't have glibc 2.17)
 LIBS += -lrt
 
+# vision
+CFLAGS += -I/home/tf/Software/tinkervision/src/api
+LIBS += `pkg-config --libs opencv` -ltfv -lv4l2
+LIBS += -lBasicUsageEnvironment -lUsageEnvironment -lgroupsock -lliveMedia -lx264
+
 ifeq ($(WITH_LOGGING),yes)
 	CFLAGS += -DDAEMONLIB_WITH_LOGGING
 endif
diff --git a/src/redapid/api.c b/src/redapid/api.c
index 6a7f903..8da3536 100644
--- a/src/redapid/api.c
+++ b/src/redapid/api.c
@@ -39,84 +39,107 @@
 #include "string.h"
 #include "version.h"
 
+#include "vision.h"
+#include "tinkervision.h"
+
 static LogSource _log_source = LOG_SOURCE_INITIALIZER;
 
 #define RED_BRICK_DEVICE_IDENTIFIER 17
 
 typedef enum {
-	FUNCTION_CREATE_SESSION = 1,
-	FUNCTION_EXPIRE_SESSION,
-	FUNCTION_EXPIRE_SESSION_UNCHECKED,
-	FUNCTION_KEEP_SESSION_ALIVE,
-
-	FUNCTION_RELEASE_OBJECT,
-	FUNCTION_RELEASE_OBJECT_UNCHECKED,
-
-	FUNCTION_ALLOCATE_STRING,
-	FUNCTION_TRUNCATE_STRING,
-	FUNCTION_GET_STRING_LENGTH,
-	FUNCTION_SET_STRING_CHUNK,
-	FUNCTION_GET_STRING_CHUNK,
-
-	FUNCTION_ALLOCATE_LIST,
-	FUNCTION_GET_LIST_LENGTH,
-	FUNCTION_GET_LIST_ITEM,
-	FUNCTION_APPEND_TO_LIST,
-	FUNCTION_REMOVE_FROM_LIST,
-
-	FUNCTION_OPEN_FILE,
-	FUNCTION_CREATE_PIPE,
-	FUNCTION_GET_FILE_INFO,
-	FUNCTION_READ_FILE,
-	FUNCTION_READ_FILE_ASYNC,
-	FUNCTION_ABORT_ASYNC_FILE_READ,
-	FUNCTION_WRITE_FILE,
-	FUNCTION_WRITE_FILE_UNCHECKED,
-	FUNCTION_WRITE_FILE_ASYNC,
-	FUNCTION_SET_FILE_POSITION,
-	FUNCTION_GET_FILE_POSITION,
-	FUNCTION_SET_FILE_EVENTS,
-	FUNCTION_GET_FILE_EVENTS,
-	CALLBACK_ASYNC_FILE_READ,
-	CALLBACK_ASYNC_FILE_WRITE,
-	CALLBACK_FILE_EVENTS_OCCURRED,
-
-	FUNCTION_OPEN_DIRECTORY,
-	FUNCTION_GET_DIRECTORY_NAME,
-	FUNCTION_GET_NEXT_DIRECTORY_ENTRY,
-	FUNCTION_REWIND_DIRECTORY,
-	FUNCTION_CREATE_DIRECTORY,
-
-	FUNCTION_GET_PROCESSES,
-	FUNCTION_SPAWN_PROCESS,
-	FUNCTION_KILL_PROCESS,
-	FUNCTION_GET_PROCESS_COMMAND,
-	FUNCTION_GET_PROCESS_IDENTITY,
-	FUNCTION_GET_PROCESS_STDIO,
-	FUNCTION_GET_PROCESS_STATE,
-	CALLBACK_PROCESS_STATE_CHANGED,
-
-	FUNCTION_GET_PROGRAMS,
-	FUNCTION_DEFINE_PROGRAM,
-	FUNCTION_PURGE_PROGRAM,
-	FUNCTION_GET_PROGRAM_IDENTIFIER,
-	FUNCTION_GET_PROGRAM_ROOT_DIRECTORY,
-	FUNCTION_SET_PROGRAM_COMMAND,
-	FUNCTION_GET_PROGRAM_COMMAND,
-	FUNCTION_SET_PROGRAM_STDIO_REDIRECTION,
-	FUNCTION_GET_PROGRAM_STDIO_REDIRECTION,
-	FUNCTION_SET_PROGRAM_SCHEDULE,
-	FUNCTION_GET_PROGRAM_SCHEDULE,
-	FUNCTION_GET_PROGRAM_SCHEDULER_STATE,
-	FUNCTION_CONTINUE_PROGRAM_SCHEDULE,
-	FUNCTION_START_PROGRAM,
-	FUNCTION_GET_LAST_SPAWNED_PROGRAM_PROCESS,
-	FUNCTION_GET_CUSTOM_PROGRAM_OPTION_NAMES,
-	FUNCTION_SET_CUSTOM_PROGRAM_OPTION_VALUE,
-	FUNCTION_GET_CUSTOM_PROGRAM_OPTION_VALUE,
-	FUNCTION_REMOVE_CUSTOM_PROGRAM_OPTION,
-	CALLBACK_PROGRAM_SCHEDULER_STATE_CHANGED,
-	CALLBACK_PROGRAM_PROCESS_SPAWNED
+        FUNCTION_CREATE_SESSION = 1,
+        FUNCTION_EXPIRE_SESSION,
+        FUNCTION_EXPIRE_SESSION_UNCHECKED,
+        FUNCTION_KEEP_SESSION_ALIVE,
+
+        FUNCTION_RELEASE_OBJECT,
+        FUNCTION_RELEASE_OBJECT_UNCHECKED,
+
+        FUNCTION_ALLOCATE_STRING,
+        FUNCTION_TRUNCATE_STRING,
+        FUNCTION_GET_STRING_LENGTH,
+        FUNCTION_SET_STRING_CHUNK,
+        FUNCTION_GET_STRING_CHUNK,
+
+        FUNCTION_ALLOCATE_LIST,
+        FUNCTION_GET_LIST_LENGTH,
+        FUNCTION_GET_LIST_ITEM,
+        FUNCTION_APPEND_TO_LIST,
+        FUNCTION_REMOVE_FROM_LIST,
+
+        FUNCTION_OPEN_FILE,
+        FUNCTION_CREATE_PIPE,
+        FUNCTION_GET_FILE_INFO,
+        FUNCTION_READ_FILE,
+        FUNCTION_READ_FILE_ASYNC,
+        FUNCTION_ABORT_ASYNC_FILE_READ,
+        FUNCTION_WRITE_FILE,
+        FUNCTION_WRITE_FILE_UNCHECKED,
+        FUNCTION_WRITE_FILE_ASYNC,
+        FUNCTION_SET_FILE_POSITION,
+        FUNCTION_GET_FILE_POSITION,
+        FUNCTION_SET_FILE_EVENTS,
+        FUNCTION_GET_FILE_EVENTS,
+        CALLBACK_ASYNC_FILE_READ,
+        CALLBACK_ASYNC_FILE_WRITE,
+        CALLBACK_FILE_EVENTS_OCCURRED,
+
+        FUNCTION_OPEN_DIRECTORY,
+        FUNCTION_GET_DIRECTORY_NAME,
+        FUNCTION_GET_NEXT_DIRECTORY_ENTRY,
+        FUNCTION_REWIND_DIRECTORY,
+        FUNCTION_CREATE_DIRECTORY,
+
+        FUNCTION_GET_PROCESSES,
+        FUNCTION_SPAWN_PROCESS,
+        FUNCTION_KILL_PROCESS,
+        FUNCTION_GET_PROCESS_COMMAND,
+        FUNCTION_GET_PROCESS_IDENTITY,
+        FUNCTION_GET_PROCESS_STDIO,
+        FUNCTION_GET_PROCESS_STATE,
+        CALLBACK_PROCESS_STATE_CHANGED,
+
+        FUNCTION_GET_PROGRAMS,
+        FUNCTION_DEFINE_PROGRAM,
+        FUNCTION_PURGE_PROGRAM,
+        FUNCTION_GET_PROGRAM_IDENTIFIER,
+        FUNCTION_GET_PROGRAM_ROOT_DIRECTORY,
+        FUNCTION_SET_PROGRAM_COMMAND,
+        FUNCTION_GET_PROGRAM_COMMAND,
+        FUNCTION_SET_PROGRAM_STDIO_REDIRECTION,
+        FUNCTION_GET_PROGRAM_STDIO_REDIRECTION,
+        FUNCTION_SET_PROGRAM_SCHEDULE,
+        FUNCTION_GET_PROGRAM_SCHEDULE,
+        FUNCTION_GET_PROGRAM_SCHEDULER_STATE,
+        FUNCTION_CONTINUE_PROGRAM_SCHEDULE,
+        FUNCTION_START_PROGRAM,
+        FUNCTION_GET_LAST_SPAWNED_PROGRAM_PROCESS,
+        FUNCTION_GET_CUSTOM_PROGRAM_OPTION_NAMES,
+        FUNCTION_SET_CUSTOM_PROGRAM_OPTION_VALUE,
+        FUNCTION_GET_CUSTOM_PROGRAM_OPTION_VALUE,
+        FUNCTION_REMOVE_CUSTOM_PROGRAM_OPTION,
+        CALLBACK_PROGRAM_SCHEDULER_STATE_CHANGED,
+        CALLBACK_PROGRAM_PROCESS_SPAWNED,
+
+        FUNCTION_VISION_CAMERA_AVAILABLE,
+        FUNCTION_VISION_PRESELECT_FRAMESIZE,
+        FUNCTION_VISION_START_IDLE,
+        FUNCTION_VISION_SET_LATENCY,
+        FUNCTION_VISION_GET_RESOLUTION,
+        FUNCTION_VISION_PAUSE,
+        FUNCTION_VISION_RESTART,
+        FUNCTION_VISION_QUIT,
+        FUNCTION_VISION_PAUSE_ID,
+        FUNCTION_VISION_RESTART_ID,
+        FUNCTION_VISION_CHAIN,
+        FUNCTION_VISION_COLORMATCH_START,
+        FUNCTION_VISION_COLORMATCH_STOP,
+        FUNCTION_VISION_COLORMATCH_GET,
+        CALLBACK_VISION_COLORMATCH_UPDATE,
+        FUNCTION_VISION_MOTION_START,
+        CALLBACK_VISION_MOTION_UPDATE,
+        FUNCTION_VISION_STREAM,
+        FUNCTION_VISION_SNAPSHOT
 } APIFunctionID;
 
 static uint32_t _uid = 0; // always little endian
@@ -126,179 +149,181 @@ static FileEventsOccurredCallback _file_events_occurred_callback;
 static ProcessStateChangedCallback _process_state_changed_callback;
 static ProgramSchedulerStateChangedCallback _program_scheduler_state_changed_callback;
 static ProgramProcessSpawnedCallback _program_process_spawned_callback;
+static VisionColormatchUpdateCallback _vision_colormatch_update_callback;
+static VisionMotionUpdateCallback _vision_motion_update_callback;
 
 static void api_prepare_response(Packet *request, Packet *response, uint8_t length) {
-	// memset'ing the whole response to zero first ensures that all members
-	// have a known initial value, that no random heap/stack data can leak to
-	// the client and that all potential object ID members are set to zero to
-	// indicate that there is no object here
-	memset(response, 0, length);
-
-	response->header.uid = request->header.uid;
-	response->header.length = length;
-	response->header.function_id = request->header.function_id;
-
-	packet_header_set_sequence_number(&response->header,
-	                                  packet_header_get_sequence_number(&request->header));
-	packet_header_set_response_expected(&response->header, true);
+        // memset'ing the whole response to zero first ensures that all members
+        // have a known initial value, that no random heap/stack data can leak to
+        // the client and that all potential object ID members are set to zero to
+        // indicate that there is no object here
+        memset(response, 0, length);
+
+        response->header.uid = request->header.uid;
+        response->header.length = length;
+        response->header.function_id = request->header.function_id;
+
+        packet_header_set_sequence_number(&response->header,
+                                          packet_header_get_sequence_number(&request->header));
+        packet_header_set_response_expected(&response->header, true);
 }
 
 void api_prepare_callback(Packet *callback, uint8_t length, uint8_t function_id) {
-	// memset'ing the whole callback to zero first ensures that all members
-	// have a known initial value, that no random heap/stack data can leak to
-	// the client and that all potential object ID members are set to zero to
-	// indicate that there is no object here
-	memset(callback, 0, length);
-
-	callback->header.uid = _uid;
-	callback->header.length = length;
-	callback->header.function_id = function_id;
-
-	packet_header_set_sequence_number(&callback->header, 0);
-	packet_header_set_response_expected(&callback->header, true);
+        // memset'ing the whole callback to zero first ensures that all members
+        // have a known initial value, that no random heap/stack data can leak to
+        // the client and that all potential object ID members are set to zero to
+        // indicate that there is no object here
+        memset(callback, 0, length);
+
+        callback->header.uid = _uid;
+        callback->header.length = length;
+        callback->header.function_id = function_id;
+
+        packet_header_set_sequence_number(&callback->header, 0);
+        packet_header_set_response_expected(&callback->header, true);
 }
 
 static void api_send_response_if_expected(Packet *request, PacketE error_code) {
-	EmptyResponse response;
+        EmptyResponse response;
 
-	if (!packet_header_get_response_expected(&request->header)) {
-		return;
-	}
+        if (!packet_header_get_response_expected(&request->header)) {
+                return;
+        }
 
-	api_prepare_response(request, (Packet *)&response, sizeof(response));
+        api_prepare_response(request, (Packet *)&response, sizeof(response));
 
-	packet_header_set_error_code(&response.header, error_code);
+        packet_header_set_error_code(&response.header, error_code);
 
-	network_dispatch_response((Packet *)&response);
+        network_dispatch_response((Packet *)&response);
 }
 
 static PacketE api_get_packet_error_code(APIE error_code) {
-	if (error_code == API_E_INVALID_PARAMETER || error_code == API_E_UNKNOWN_OBJECT_ID) {
-		return PACKET_E_INVALID_PARAMETER;
-	} else if (error_code != API_E_SUCCESS) {
-		return PACKET_E_UNKNOWN_ERROR;
-	} else {
-		return PACKET_E_SUCCESS;
-	}
+        if (error_code == API_E_INVALID_PARAMETER || error_code == API_E_UNKNOWN_OBJECT_ID) {
+                return PACKET_E_INVALID_PARAMETER;
+        } else if (error_code != API_E_SUCCESS) {
+                return PACKET_E_UNKNOWN_ERROR;
+        } else {
+                return PACKET_E_SUCCESS;
+        }
 }
 
 #define CALL_PROCEDURE(packet_prefix, function_suffix, body) \
-	static void api_##function_suffix(packet_prefix##Request *request) { \
-		PacketE error_code; \
-		body \
-		api_send_response_if_expected((Packet *)request, error_code); \
-	}
+        static void api_##function_suffix(packet_prefix##Request *request) { \
+                PacketE error_code; \
+                body \
+                api_send_response_if_expected((Packet *)request, error_code); \
+        }
 
 #define CALL_FUNCTION(packet_prefix, function_suffix, body) \
-	static void api_##function_suffix(packet_prefix##Request *request) { \
-		packet_prefix##Response response; \
-		api_prepare_response((Packet *)request, (Packet *)&response, sizeof(response)); \
-		body \
-		network_dispatch_response((Packet *)&response); \
-	}
+        static void api_##function_suffix(packet_prefix##Request *request) { \
+                packet_prefix##Response response; \
+                api_prepare_response((Packet *)request, (Packet *)&response, sizeof(response)); \
+                body \
+                network_dispatch_response((Packet *)&response); \
+        }
 
 #define CALL_TYPE_FUNCTION(packet_prefix, function_suffix, body, object_type, type, variable) \
-	static void api_##function_suffix(packet_prefix##Request *request) { \
-		packet_prefix##Response response; \
-		type *variable; \
-		api_prepare_response((Packet *)request, (Packet *)&response, sizeof(response)); \
-		response.error_code = inventory_get_object(object_type, request->variable##_id, \
-		                                           (Object **)&variable); \
-		if (response.error_code == API_E_SUCCESS) { \
-			body \
-		} \
-		network_dispatch_response((Packet *)&response); \
-	}
+        static void api_##function_suffix(packet_prefix##Request *request) { \
+                packet_prefix##Response response; \
+                type *variable; \
+                api_prepare_response((Packet *)request, (Packet *)&response, sizeof(response)); \
+                response.error_code = inventory_get_object(object_type, request->variable##_id, \
+                                                           (Object **)&variable); \
+                if (response.error_code == API_E_SUCCESS) { \
+                        body \
+                } \
+                network_dispatch_response((Packet *)&response); \
+        }
 
 #define CALL_TYPE_FUNCTION_WITH_SESSION(packet_prefix, function_suffix, body, object_type, type, variable) \
-	static void api_##function_suffix(packet_prefix##Request *request) { \
-		packet_prefix##Response response; \
-		type *variable; \
-		Session *session; \
-		api_prepare_response((Packet *)request, (Packet *)&response, sizeof(response)); \
-		response.error_code = inventory_get_object(object_type, request->variable##_id, \
-		                                           (Object **)&variable); \
-		if (response.error_code == API_E_SUCCESS) { \
-			response.error_code = inventory_get_session(request->session_id, &session); \
-			if (response.error_code == API_E_SUCCESS) { \
-				body \
-			} \
-		} \
-		network_dispatch_response((Packet *)&response); \
-	}
+        static void api_##function_suffix(packet_prefix##Request *request) { \
+                packet_prefix##Response response; \
+                type *variable; \
+                Session *session; \
+                api_prepare_response((Packet *)request, (Packet *)&response, sizeof(response)); \
+                response.error_code = inventory_get_object(object_type, request->variable##_id, \
+                                                           (Object **)&variable); \
+                if (response.error_code == API_E_SUCCESS) { \
+                        response.error_code = inventory_get_session(request->session_id, &session); \
+                        if (response.error_code == API_E_SUCCESS) { \
+                                body \
+                        } \
+                } \
+                network_dispatch_response((Packet *)&response); \
+        }
 
 #define CALL_FUNCTION_WITH_STRING(packet_prefix, function_suffix, variable, body) \
-	static void api_##function_suffix(packet_prefix##Request *request) { \
-		packet_prefix##Response response; \
-		String *variable; \
-		api_prepare_response((Packet *)request, (Packet *)&response, sizeof(response)); \
-		response.error_code = string_get(request->variable##_string_id, &variable); \
-		if (response.error_code == API_E_SUCCESS) { \
-			body \
-		} \
-		network_dispatch_response((Packet *)&response); \
-	}
+        static void api_##function_suffix(packet_prefix##Request *request) { \
+                packet_prefix##Response response; \
+                String *variable; \
+                api_prepare_response((Packet *)request, (Packet *)&response, sizeof(response)); \
+                response.error_code = string_get(request->variable##_string_id, &variable); \
+                if (response.error_code == API_E_SUCCESS) { \
+                        body \
+                } \
+                network_dispatch_response((Packet *)&response); \
+        }
 
 #define CALL_FUNCTION_WITH_SESSION(packet_prefix, function_suffix, body) \
-	static void api_##function_suffix(packet_prefix##Request *request) { \
-		packet_prefix##Response response; \
-		Session *session; \
-		api_prepare_response((Packet *)request, (Packet *)&response, sizeof(response)); \
-		response.error_code = inventory_get_session(request->session_id, &session); \
-		if (response.error_code == API_E_SUCCESS) { \
-			body \
-		} \
-		network_dispatch_response((Packet *)&response); \
-	}
+        static void api_##function_suffix(packet_prefix##Request *request) { \
+                packet_prefix##Response response; \
+                Session *session; \
+                api_prepare_response((Packet *)request, (Packet *)&response, sizeof(response)); \
+                response.error_code = inventory_get_session(request->session_id, &session); \
+                if (response.error_code == API_E_SUCCESS) { \
+                        body \
+                } \
+                network_dispatch_response((Packet *)&response); \
+        }
 
 //
 // session
 //
 
 #define CALL_SESSION_FUNCTION(packet_prefix, function_suffix, body) \
-	static void api_##function_suffix(packet_prefix##Request *request) { \
-		packet_prefix##Response response; \
-		Session *session; \
-		api_prepare_response((Packet *)request, (Packet *)&response, sizeof(response)); \
-		response.error_code = inventory_get_session(request->session_id, &session); \
-		if (response.error_code == API_E_SUCCESS) { \
-			body \
-		} \
-		network_dispatch_response((Packet *)&response); \
-	}
+        static void api_##function_suffix(packet_prefix##Request *request) { \
+                packet_prefix##Response response; \
+                Session *session; \
+                api_prepare_response((Packet *)request, (Packet *)&response, sizeof(response)); \
+                response.error_code = inventory_get_session(request->session_id, &session); \
+                if (response.error_code == API_E_SUCCESS) { \
+                        body \
+                } \
+                network_dispatch_response((Packet *)&response); \
+        }
 
 #define CALL_SESSION_PROCEDURE(packet_prefix, function_suffix, error_handler, body) \
-	static void api_##function_suffix(packet_prefix##Request *request) { \
-		Session *session; \
-		APIE api_error_code = inventory_get_session(request->session_id, &session); \
-		PacketE packet_error_code; \
-		if (api_error_code != API_E_SUCCESS) { \
-			APIE error_code = api_error_code; \
-			(void)error_code; \
-			error_handler \
-			packet_error_code = api_get_packet_error_code(api_error_code); \
-		} else { \
-			PacketE error_code; \
-			body \
-			packet_error_code = error_code; \
-		} \
-		api_send_response_if_expected((Packet *)request, packet_error_code); \
-	}
+        static void api_##function_suffix(packet_prefix##Request *request) { \
+                Session *session; \
+                APIE api_error_code = inventory_get_session(request->session_id, &session); \
+                PacketE packet_error_code; \
+                if (api_error_code != API_E_SUCCESS) { \
+                        APIE error_code = api_error_code; \
+                        (void)error_code; \
+                        error_handler \
+                        packet_error_code = api_get_packet_error_code(api_error_code); \
+                } else { \
+                        PacketE error_code; \
+                        body \
+                        packet_error_code = error_code; \
+                } \
+                api_send_response_if_expected((Packet *)request, packet_error_code); \
+        }
 
 CALL_FUNCTION(CreateSession, create_session, {
-	response.error_code = session_create(request->lifetime, &response.session_id);
+        response.error_code = session_create(request->lifetime, &response.session_id);
 })
 
 CALL_SESSION_FUNCTION(ExpireSession, expire_session, {
-	response.error_code = session_expire(session);
+        response.error_code = session_expire(session);
 })
 
 CALL_SESSION_PROCEDURE(ExpireSessionUnchecked, expire_session_unchecked, {}, {
-	error_code = session_expire_unchecked(session);
+        error_code = session_expire_unchecked(session);
 })
 
 CALL_SESSION_FUNCTION(KeepSessionAlive, keep_session_alive, {
-	response.error_code = session_keep_alive(session, request->lifetime);
+        response.error_code = session_keep_alive(session, request->lifetime);
 })
 
 //
@@ -306,54 +331,54 @@ CALL_SESSION_FUNCTION(KeepSessionAlive, keep_session_alive, {
 //
 
 #define CALL_OBJECT_FUNCTION_WITH_SESSION(packet_prefix, function_suffix, body) \
-	static void api_##function_suffix(packet_prefix##Request *request) { \
-		packet_prefix##Response response; \
-		Object *object; \
-		Session *session; \
-		api_prepare_response((Packet *)request, (Packet *)&response, sizeof(response)); \
-		response.error_code = inventory_get_object(OBJECT_TYPE_ANY, request->object_id, &object); \
-		if (response.error_code == API_E_SUCCESS) { \
-			response.error_code = inventory_get_session(request->session_id, &session); \
-			if (response.error_code == API_E_SUCCESS) { \
-				body \
-			} \
-		} \
-		network_dispatch_response((Packet *)&response); \
-	}
+        static void api_##function_suffix(packet_prefix##Request *request) { \
+                packet_prefix##Response response; \
+                Object *object; \
+                Session *session; \
+                api_prepare_response((Packet *)request, (Packet *)&response, sizeof(response)); \
+                response.error_code = inventory_get_object(OBJECT_TYPE_ANY, request->object_id, &object); \
+                if (response.error_code == API_E_SUCCESS) { \
+                        response.error_code = inventory_get_session(request->session_id, &session); \
+                        if (response.error_code == API_E_SUCCESS) { \
+                                body \
+                        } \
+                } \
+                network_dispatch_response((Packet *)&response); \
+        }
 
 #define CALL_OBJECT_PROCEDURE_WITH_SESSION(packet_prefix, function_suffix, error_handler, body) \
-	static void api_##function_suffix(packet_prefix##Request *request) { \
-		Object *object; \
-		APIE api_error_code = inventory_get_object(OBJECT_TYPE_ANY, request->object_id, &object); \
-		PacketE packet_error_code; \
-		Session *session; \
-		if (api_error_code != API_E_SUCCESS) { \
-			APIE error_code = api_error_code; \
-			(void)error_code; \
-			error_handler \
-			packet_error_code = api_get_packet_error_code(api_error_code); \
-		} else { \
-			api_error_code = inventory_get_session(request->session_id, &session); \
-			if (api_error_code != API_E_SUCCESS) { \
-				APIE error_code = api_error_code; \
-				(void)error_code; \
-				error_handler \
-				packet_error_code = api_get_packet_error_code(api_error_code); \
-			} else { \
-				PacketE error_code; \
-				body \
-				packet_error_code = error_code; \
-			} \
-		} \
-		api_send_response_if_expected((Packet *)request, packet_error_code); \
-	}
+        static void api_##function_suffix(packet_prefix##Request *request) { \
+                Object *object; \
+                APIE api_error_code = inventory_get_object(OBJECT_TYPE_ANY, request->object_id, &object); \
+                PacketE packet_error_code; \
+                Session *session; \
+                if (api_error_code != API_E_SUCCESS) { \
+                        APIE error_code = api_error_code; \
+                        (void)error_code; \
+                        error_handler \
+                        packet_error_code = api_get_packet_error_code(api_error_code); \
+                } else { \
+                        api_error_code = inventory_get_session(request->session_id, &session); \
+                        if (api_error_code != API_E_SUCCESS) { \
+                                APIE error_code = api_error_code; \
+                                (void)error_code; \
+                                error_handler \
+                                packet_error_code = api_get_packet_error_code(api_error_code); \
+                        } else { \
+                                PacketE error_code; \
+                                body \
+                                packet_error_code = error_code; \
+                        } \
+                } \
+                api_send_response_if_expected((Packet *)request, packet_error_code); \
+        }
 
 CALL_OBJECT_FUNCTION_WITH_SESSION(ReleaseObject, release_object, {
-	response.error_code = object_release(object, session);
+        response.error_code = object_release(object, session);
 })
 
 CALL_OBJECT_PROCEDURE_WITH_SESSION(ReleaseObjectUnchecked, release_object_unchecked, {}, {
-	error_code = object_release_unchecked(object, session);
+        error_code = object_release_unchecked(object, session);
 })
 
 #undef CALL_OBJECT_PROCEDURE_WITH_SESSION
@@ -364,29 +389,29 @@ CALL_OBJECT_PROCEDURE_WITH_SESSION(ReleaseObjectUnchecked, release_object_unchec
 //
 
 #define CALL_STRING_FUNCTION(packet_prefix, function_suffix, body) \
-	CALL_TYPE_FUNCTION(packet_prefix, function_suffix, body, \
-	                   OBJECT_TYPE_STRING, String, string)
+        CALL_TYPE_FUNCTION(packet_prefix, function_suffix, body, \
+                           OBJECT_TYPE_STRING, String, string)
 
 CALL_FUNCTION_WITH_SESSION(AllocateString, allocate_string, {
-	response.error_code = string_allocate(request->length_to_reserve,
-	                                      request->buffer, session,
-	                                      &response.string_id);
+        response.error_code = string_allocate(request->length_to_reserve,
+                                              request->buffer, session,
+                                              &response.string_id);
 })
 
 CALL_STRING_FUNCTION(TruncateString, truncate_string, {
-	response.error_code = string_truncate(string, request->length);
+        response.error_code = string_truncate(string, request->length);
 })
 
 CALL_STRING_FUNCTION(GetStringLength, get_string_length, {
-	response.error_code = string_get_length(string, &response.length);
+        response.error_code = string_get_length(string, &response.length);
 })
 
 CALL_STRING_FUNCTION(SetStringChunk, set_string_chunk, {
-	response.error_code = string_set_chunk(string, request->offset, request->buffer);
+        response.error_code = string_set_chunk(string, request->offset, request->buffer);
 })
 
 CALL_STRING_FUNCTION(GetStringChunk, get_string_chunk, {
-	response.error_code = string_get_chunk(string, request->offset, response.buffer);
+        response.error_code = string_get_chunk(string, request->offset, response.buffer);
 })
 
 #undef CALL_STRING_FUNCTION
@@ -396,35 +421,35 @@ CALL_STRING_FUNCTION(GetStringChunk, get_string_chunk, {
 //
 
 #define CALL_LIST_FUNCTION(packet_prefix, function_suffix, body) \
-	CALL_TYPE_FUNCTION(packet_prefix, function_suffix, body, \
-	                   OBJECT_TYPE_LIST, List, list)
+        CALL_TYPE_FUNCTION(packet_prefix, function_suffix, body, \
+                           OBJECT_TYPE_LIST, List, list)
 
 #define CALL_LIST_FUNCTION_WITH_SESSION(packet_prefix, function_suffix, body) \
-	CALL_TYPE_FUNCTION_WITH_SESSION(packet_prefix, function_suffix, body, \
-	                                OBJECT_TYPE_LIST, List, list)
+        CALL_TYPE_FUNCTION_WITH_SESSION(packet_prefix, function_suffix, body, \
+                                        OBJECT_TYPE_LIST, List, list)
 
 CALL_FUNCTION_WITH_SESSION(AllocateList, allocate_list, {
-	response.error_code = list_allocate(request->length_to_reserve, session,
-	                                    OBJECT_CREATE_FLAG_EXTERNAL,
-	                                    &response.list_id, NULL);
+        response.error_code = list_allocate(request->length_to_reserve, session,
+                                            OBJECT_CREATE_FLAG_EXTERNAL,
+                                            &response.list_id, NULL);
 })
 
 CALL_LIST_FUNCTION(GetListLength, get_list_length, {
-	response.error_code = list_get_length(list, &response.length);
+        response.error_code = list_get_length(list, &response.length);
 })
 
 CALL_LIST_FUNCTION_WITH_SESSION(GetListItem, get_list_item, {
-	response.error_code = list_get_item(list, request->index, session,
-	                                    &response.item_object_id,
-	                                    &response.type);
+        response.error_code = list_get_item(list, request->index, session,
+                                            &response.item_object_id,
+                                            &response.type);
 })
 
 CALL_LIST_FUNCTION(AppendToList, append_to_list, {
-	response.error_code = list_append_to(list, request->item_object_id);
+        response.error_code = list_append_to(list, request->item_object_id);
 })
 
 CALL_LIST_FUNCTION(RemoveFromList, remove_from_list, {
-	response.error_code = list_remove_from(list, request->index);
+        response.error_code = list_remove_from(list, request->index);
 })
 
 #undef CALL_LIST_FUNCTION_WITH_SESSION
@@ -435,104 +460,104 @@ CALL_LIST_FUNCTION(RemoveFromList, remove_from_list, {
 //
 
 #define CALL_FILE_FUNCTION(packet_prefix, function_suffix, body) \
-	CALL_TYPE_FUNCTION(packet_prefix, function_suffix, body, \
-	                   OBJECT_TYPE_FILE, File, file)
+        CALL_TYPE_FUNCTION(packet_prefix, function_suffix, body, \
+                           OBJECT_TYPE_FILE, File, file)
 
 #define CALL_FILE_FUNCTION_WITH_SESSION(packet_prefix, function_suffix, body) \
-	CALL_TYPE_FUNCTION_WITH_SESSION(packet_prefix, function_suffix, body, \
-	                                OBJECT_TYPE_FILE, File, file)
+        CALL_TYPE_FUNCTION_WITH_SESSION(packet_prefix, function_suffix, body, \
+                                        OBJECT_TYPE_FILE, File, file)
 
 #define CALL_FILE_PROCEDURE(packet_prefix, function_suffix, error_handler, body) \
-	static void api_##function_suffix(packet_prefix##Request *request) { \
-		File *file; \
-		APIE api_error_code = inventory_get_object(OBJECT_TYPE_FILE, request->file_id, \
-		                                           (Object **)&file); \
-		PacketE packet_error_code; \
-		if (api_error_code != API_E_SUCCESS) { \
-			APIE error_code = api_error_code; \
-			(void)error_code; \
-			error_handler \
-			packet_error_code = api_get_packet_error_code(api_error_code); \
-		} else { \
-			PacketE error_code; \
-			body \
-			packet_error_code = error_code; \
-		} \
-		api_send_response_if_expected((Packet *)request, packet_error_code); \
-	}
+        static void api_##function_suffix(packet_prefix##Request *request) { \
+                File *file; \
+                APIE api_error_code = inventory_get_object(OBJECT_TYPE_FILE, request->file_id, \
+                                                           (Object **)&file); \
+                PacketE packet_error_code; \
+                if (api_error_code != API_E_SUCCESS) { \
+                        APIE error_code = api_error_code; \
+                        (void)error_code; \
+                        error_handler \
+                        packet_error_code = api_get_packet_error_code(api_error_code); \
+                } else { \
+                        PacketE error_code; \
+                        body \
+                        packet_error_code = error_code; \
+                } \
+                api_send_response_if_expected((Packet *)request, packet_error_code); \
+        }
 
 CALL_FUNCTION_WITH_SESSION(OpenFile, open_file, {
-	response.error_code = file_open(request->name_string_id, request->flags,
-	                                request->permissions, request->uid,
-	                                request->gid, session,
-	                                OBJECT_CREATE_FLAG_EXTERNAL,
-	                                &response.file_id, NULL);
+        response.error_code = file_open(request->name_string_id, request->flags,
+                                        request->permissions, request->uid,
+                                        request->gid, session,
+                                        OBJECT_CREATE_FLAG_EXTERNAL,
+                                        &response.file_id, NULL);
 })
 
 CALL_FUNCTION_WITH_SESSION(CreatePipe, create_pipe, {
-	response.error_code = pipe_create_(request->flags, request->length, session,
-	                                   OBJECT_CREATE_FLAG_EXTERNAL,
-	                                   &response.file_id, NULL);
+        response.error_code = pipe_create_(request->flags, request->length, session,
+                                           OBJECT_CREATE_FLAG_EXTERNAL,
+                                           &response.file_id, NULL);
 })
 
 CALL_FILE_FUNCTION_WITH_SESSION(GetFileInfo, get_file_info, {
-	response.error_code = file_get_info(file, session, &response.type,
-	                                    &response.name_string_id, &response.flags,
-	                                    &response.permissions, &response.uid,
-	                                    &response.gid, &response.length,
-	                                    &response.access_timestamp,
-	                                    &response.modification_timestamp,
-	                                    &response.status_change_timestamp);
+        response.error_code = file_get_info(file, session, &response.type,
+                                            &response.name_string_id, &response.flags,
+                                            &response.permissions, &response.uid,
+                                            &response.gid, &response.length,
+                                            &response.access_timestamp,
+                                            &response.modification_timestamp,
+                                            &response.status_change_timestamp);
 })
 
 CALL_FILE_FUNCTION(ReadFile, read_file, {
-	response.error_code = file_read(file, response.buffer, request->length_to_read,
-	                                &response.length_read);
+        response.error_code = file_read(file, response.buffer, request->length_to_read,
+                                        &response.length_read);
 })
 
 CALL_FILE_PROCEDURE(ReadFileAsync, read_file_async, {
-	// FIXME: this callback should be delivered after the response of this function
-	api_send_async_file_read_callback(request->file_id, error_code, NULL, 0);
+        // FIXME: this callback should be delivered after the response of this function
+        api_send_async_file_read_callback(request->file_id, error_code, NULL, 0);
 }, {
-	error_code = file_read_async(file, request->length_to_read);
+        error_code = file_read_async(file, request->length_to_read);
 })
 
 CALL_FILE_FUNCTION(AbortAsyncFileRead, abort_async_file_read, {
-	response.error_code = file_abort_async_read(file);
+        response.error_code = file_abort_async_read(file);
 })
 
 CALL_FILE_FUNCTION(WriteFile, write_file, {
-	response.error_code = file_write(file, request->buffer,
-	                                 request->length_to_write,
-	                                 &response.length_written);
+        response.error_code = file_write(file, request->buffer,
+                                         request->length_to_write,
+                                         &response.length_written);
 })
 
 CALL_FILE_PROCEDURE(WriteFileUnchecked, write_file_unchecked, {}, {
-	error_code = file_write_unchecked(file, request->buffer, request->length_to_write);
+        error_code = file_write_unchecked(file, request->buffer, request->length_to_write);
 })
 
 CALL_FILE_PROCEDURE(WriteFileAsync, write_file_async, {
-	// FIXME: this callback should be delivered after the response of this function
-	api_send_async_file_write_callback(request->file_id, error_code, 0);
+        // FIXME: this callback should be delivered after the response of this function
+        api_send_async_file_write_callback(request->file_id, error_code, 0);
 }, {
-	error_code = file_write_async(file, request->buffer, request->length_to_write);
+        error_code = file_write_async(file, request->buffer, request->length_to_write);
 })
 
 CALL_FILE_FUNCTION(SetFilePosition, set_file_position, {
-	response.error_code = file_set_position(file, request->offset, request->origin,
-	                                        &response.position);
+        response.error_code = file_set_position(file, request->offset, request->origin,
+                                                &response.position);
 })
 
 CALL_FILE_FUNCTION(GetFilePosition, get_file_position, {
-	response.error_code = file_get_position(file, &response.position);
+        response.error_code = file_get_position(file, &response.position);
 })
 
 CALL_FILE_FUNCTION(SetFileEvents, set_file_events, {
-	response.error_code = file_set_events(file, request->events);
+        response.error_code = file_set_events(file, request->events);
 })
 
 CALL_FILE_FUNCTION(GetFileEvents, get_file_events, {
-	response.error_code = file_get_events(file, &response.events);
+        response.error_code = file_get_events(file, &response.events);
 })
 
 #undef CALL_FILE_PROCEDURE
@@ -544,37 +569,37 @@ CALL_FILE_FUNCTION(GetFileEvents, get_file_events, {
 //
 
 #define CALL_DIRECTORY_FUNCTION(packet_prefix, function_suffix, body) \
-	CALL_TYPE_FUNCTION(packet_prefix, function_suffix, body, \
-	                   OBJECT_TYPE_DIRECTORY, Directory, directory)
+        CALL_TYPE_FUNCTION(packet_prefix, function_suffix, body, \
+                           OBJECT_TYPE_DIRECTORY, Directory, directory)
 
 #define CALL_DIRECTORY_FUNCTION_WITH_SESSION(packet_prefix, function_suffix, body) \
-	CALL_TYPE_FUNCTION_WITH_SESSION(packet_prefix, function_suffix, body, \
-	                                OBJECT_TYPE_DIRECTORY, Directory, directory)
+        CALL_TYPE_FUNCTION_WITH_SESSION(packet_prefix, function_suffix, body, \
+                                        OBJECT_TYPE_DIRECTORY, Directory, directory)
 
 CALL_FUNCTION_WITH_SESSION(OpenDirectory, open_directory, {
-	response.error_code = directory_open(request->name_string_id, session,
-	                                     &response.directory_id);
+        response.error_code = directory_open(request->name_string_id, session,
+                                             &response.directory_id);
 })
 
 CALL_DIRECTORY_FUNCTION_WITH_SESSION(GetDirectoryName, get_directory_name, {
-	response.error_code = directory_get_name(directory, session,
-	                                         &response.name_string_id);
+        response.error_code = directory_get_name(directory, session,
+                                                 &response.name_string_id);
 })
 
 CALL_DIRECTORY_FUNCTION_WITH_SESSION(GetNextDirectoryEntry, get_next_directory_entry, {
-	response.error_code = directory_get_next_entry(directory, session,
-	                                               &response.name_string_id,
-	                                               &response.type);
+        response.error_code = directory_get_next_entry(directory, session,
+                                                       &response.name_string_id,
+                                                       &response.type);
 })
 
 CALL_DIRECTORY_FUNCTION(RewindDirectory, rewind_directory, {
-	response.error_code = directory_rewind(directory);
+        response.error_code = directory_rewind(directory);
 })
 
 CALL_FUNCTION_WITH_STRING(CreateDirectory, create_directory, name, {
-	response.error_code = directory_create(name->buffer, request->flags,
-	                                       request->permissions,
-	                                       request->uid, request->gid);
+        response.error_code = directory_create(name->buffer, request->flags,
+                                               request->permissions,
+                                               request->uid, request->gid);
 })
 
 #undef CALL_DIRECTORY_FUNCTION_WITH_SESSION
@@ -585,64 +610,64 @@ CALL_FUNCTION_WITH_STRING(CreateDirectory, create_directory, name, {
 //
 
 #define CALL_PROCESS_FUNCTION(packet_prefix, function_suffix, body) \
-	CALL_TYPE_FUNCTION(packet_prefix, function_suffix, body, \
-	                   OBJECT_TYPE_PROCESS, Process, process)
+        CALL_TYPE_FUNCTION(packet_prefix, function_suffix, body, \
+                           OBJECT_TYPE_PROCESS, Process, process)
 
 #define CALL_PROCESS_FUNCTION_WITH_SESSION(packet_prefix, function_suffix, body) \
-	CALL_TYPE_FUNCTION_WITH_SESSION(packet_prefix, function_suffix, body, \
-	                                OBJECT_TYPE_PROCESS, Process, process)
+        CALL_TYPE_FUNCTION_WITH_SESSION(packet_prefix, function_suffix, body, \
+                                        OBJECT_TYPE_PROCESS, Process, process)
 
 CALL_FUNCTION_WITH_SESSION(GetProcesses, get_processes, {
-	response.error_code = inventory_get_processes(session, &response.processes_list_id);
+        response.error_code = inventory_get_processes(session, &response.processes_list_id);
 })
 
 CALL_FUNCTION_WITH_SESSION(SpawnProcess, spawn_process, {
-	response.error_code = process_spawn(request->executable_string_id,
-	                                    request->arguments_list_id,
-	                                    request->environment_list_id,
-	                                    request->working_directory_string_id,
-	                                    request->uid, request->gid,
-	                                    request->stdin_file_id,
-	                                    request->stdout_file_id,
-	                                    request->stderr_file_id,
-	                                    session,
-	                                    OBJECT_CREATE_FLAG_INTERNAL |
-	                                    OBJECT_CREATE_FLAG_EXTERNAL,
-	                                    true, NULL, NULL,
-	                                    &response.process_id, NULL);
+        response.error_code = process_spawn(request->executable_string_id,
+                                            request->arguments_list_id,
+                                            request->environment_list_id,
+                                            request->working_directory_string_id,
+                                            request->uid, request->gid,
+                                            request->stdin_file_id,
+                                            request->stdout_file_id,
+                                            request->stderr_file_id,
+                                            session,
+                                            OBJECT_CREATE_FLAG_INTERNAL |
+                                            OBJECT_CREATE_FLAG_EXTERNAL,
+                                            true, NULL, NULL,
+                                            &response.process_id, NULL);
 })
 
 CALL_PROCESS_FUNCTION(KillProcess, kill_process, {
-	response.error_code = process_kill(process, request->signal);
+        response.error_code = process_kill(process, request->signal);
 })
 
 CALL_PROCESS_FUNCTION_WITH_SESSION(GetProcessCommand, get_process_command, {
-	response.error_code = process_get_command(process, session,
-	                                          &response.executable_string_id,
-	                                          &response.arguments_list_id,
-	                                          &response.environment_list_id,
-	                                          &response.working_directory_string_id);
+        response.error_code = process_get_command(process, session,
+                                                  &response.executable_string_id,
+                                                  &response.arguments_list_id,
+                                                  &response.environment_list_id,
+                                                  &response.working_directory_string_id);
 })
 
 CALL_PROCESS_FUNCTION(GetProcessIdentity, get_process_identity, {
-	response.error_code = process_get_identity(process,
-	                                           &response.pid,
-	                                           &response.uid,
-	                                           &response.gid);
+        response.error_code = process_get_identity(process,
+                                                   &response.pid,
+                                                   &response.uid,
+                                                   &response.gid);
 })
 
 CALL_PROCESS_FUNCTION_WITH_SESSION(GetProcessStdio, get_process_stdio, {
-	response.error_code = process_get_stdio(process, session,
-	                                        &response.stdin_file_id,
-	                                        &response.stdout_file_id,
-	                                        &response.stderr_file_id);
+        response.error_code = process_get_stdio(process, session,
+                                                &response.stdin_file_id,
+                                                &response.stdout_file_id,
+                                                &response.stderr_file_id);
 })
 
 CALL_PROCESS_FUNCTION(GetProcessState, get_process_state, {
-	response.error_code = process_get_state(process,
-	                                        &response.state,
-	                                        &response.timestamp,
-	                                        &response.exit_code);
+        response.error_code = process_get_state(process,
+                                                &response.state,
+                                                &response.timestamp,
+                                                &response.exit_code);
 })
 
 #undef CALL_PROCESS_FUNCTION_WITH_SESSION
@@ -653,149 +678,229 @@ CALL_PROCESS_FUNCTION(GetProcessState, get_process_state, {
 //
 
 #define CALL_PROGRAM_FUNCTION(packet_prefix, function_suffix, body) \
-	CALL_TYPE_FUNCTION(packet_prefix, function_suffix, body, \
-	                   OBJECT_TYPE_PROGRAM, Program, program)
+        CALL_TYPE_FUNCTION(packet_prefix, function_suffix, body, \
+                           OBJECT_TYPE_PROGRAM, Program, program)
 
 #define CALL_PROGRAM_FUNCTION_WITH_SESSION(packet_prefix, function_suffix, body) \
-	CALL_TYPE_FUNCTION_WITH_SESSION(packet_prefix, function_suffix, body, \
-	                                OBJECT_TYPE_PROGRAM, Program, program)
+        CALL_TYPE_FUNCTION_WITH_SESSION(packet_prefix, function_suffix, body, \
+                                        OBJECT_TYPE_PROGRAM, Program, program)
 
 CALL_FUNCTION_WITH_SESSION(GetPrograms, get_programs, {
-	response.error_code = inventory_get_programs(session, &response.programs_list_id);
+        response.error_code = inventory_get_programs(session, &response.programs_list_id);
 })
 
 CALL_FUNCTION_WITH_SESSION(DefineProgram, define_program, {
-	response.error_code = program_define(request->identifier_string_id, session,
-	                                     &response.program_id);
+        response.error_code = program_define(request->identifier_string_id, session,
+                                             &response.program_id);
 })
 
 CALL_PROGRAM_FUNCTION(PurgeProgram, purge_program, {
-	response.error_code = program_purge(program, request->cookie);
+        response.error_code = program_purge(program, request->cookie);
 })
 
 CALL_PROGRAM_FUNCTION_WITH_SESSION(GetProgramIdentifier, get_program_identifier, {
-	response.error_code = program_get_identifier(program, session,
-	                                             &response.identifier_string_id);
+        response.error_code = program_get_identifier(program, session,
+                                                     &response.identifier_string_id);
 })
 
 CALL_PROGRAM_FUNCTION_WITH_SESSION(GetProgramRootDirectory, get_program_root_directory, {
-	response.error_code = program_get_root_directory(program, session,
-	                                                 &response.root_directory_string_id);
+        response.error_code = program_get_root_directory(program, session,
+                                                         &response.root_directory_string_id);
 })
 
 CALL_PROGRAM_FUNCTION(SetProgramCommand, set_program_command, {
-	response.error_code = program_set_command(program,
-	                                          request->executable_string_id,
-	                                          request->arguments_list_id,
-	                                          request->environment_list_id,
-	                                          request->working_directory_string_id);
+        response.error_code = program_set_command(program,
+                                                  request->executable_string_id,
+                                                  request->arguments_list_id,
+                                                  request->environment_list_id,
+                                                  request->working_directory_string_id);
 })
 
 CALL_PROGRAM_FUNCTION_WITH_SESSION(GetProgramCommand, get_program_command, {
-	response.error_code = program_get_command(program, session,
-	                                          &response.executable_string_id,
-	                                          &response.arguments_list_id,
-	                                          &response.environment_list_id,
-	                                          &response.working_directory_string_id);
+        response.error_code = program_get_command(program, session,
+                                                  &response.executable_string_id,
+                                                  &response.arguments_list_id,
+                                                  &response.environment_list_id,
+                                                  &response.working_directory_string_id);
 })
 
 CALL_PROGRAM_FUNCTION(SetProgramStdioRedirection, set_program_stdio_redirection, {
-	response.error_code = program_set_stdio_redirection(program,
-	                                                    request->stdin_redirection,
-	                                                    request->stdin_file_name_string_id,
-	                                                    request->stdout_redirection,
-	                                                    request->stdout_file_name_string_id,
-	                                                    request->stderr_redirection,
-	                                                    request->stderr_file_name_string_id);
+        response.error_code = program_set_stdio_redirection(program,
+                                                            request->stdin_redirection,
+                                                            request->stdin_file_name_string_id,
+                                                            request->stdout_redirection,
+                                                            request->stdout_file_name_string_id,
+                                                            request->stderr_redirection,
+                                                            request->stderr_file_name_string_id);
 })
 
 CALL_PROGRAM_FUNCTION_WITH_SESSION(GetProgramStdioRedirection, get_program_stdio_redirection, {
-	response.error_code = program_get_stdio_redirection(program, session,
-	                                                    &response.stdin_redirection,
-	                                                    &response.stdin_file_name_string_id,
-	                                                    &response.stdout_redirection,
-	                                                    &response.stdout_file_name_string_id,
-	                                                    &response.stderr_redirection,
-	                                                    &response.stderr_file_name_string_id);
+        response.error_code = program_get_stdio_redirection(program, session,
+                                                            &response.stdin_redirection,
+                                                            &response.stdin_file_name_string_id,
+                                                            &response.stdout_redirection,
+                                                            &response.stdout_file_name_string_id,
+                                                            &response.stderr_redirection,
+                                                            &response.stderr_file_name_string_id);
 })
 
 CALL_PROGRAM_FUNCTION(SetProgramSchedule, set_program_schedule, {
-	response.error_code = program_set_schedule(program,
-	                                           request->start_mode,
-	                                           request->continue_after_error,
-	                                           request->start_interval,
-	                                           request->start_fields_string_id);
+        response.error_code = program_set_schedule(program,
+                                                   request->start_mode,
+                                                   request->continue_after_error,
+                                                   request->start_interval,
+                                                   request->start_fields_string_id);
 })
 
 CALL_PROGRAM_FUNCTION_WITH_SESSION(GetProgramSchedule, get_program_schedule, {
-	response.error_code = program_get_schedule(program, session,
-	                                           &response.start_mode,
-	                                           &response.continue_after_error,
-	                                           &response.start_interval,
-	                                           &response.start_fields_string_id);
+        response.error_code = program_get_schedule(program, session,
+                                                   &response.start_mode,
+                                                   &response.continue_after_error,
+                                                   &response.start_interval,
+                                                   &response.start_fields_string_id);
 })
 
 CALL_PROGRAM_FUNCTION_WITH_SESSION(GetProgramSchedulerState, get_program_scheduler_state, {
-	response.error_code = program_get_scheduler_state(program, session,
-	                                                  &response.state,
-	                                                  &response.timestamp,
-	                                                  &response.message_string_id);
+        response.error_code = program_get_scheduler_state(program, session,
+                                                          &response.state,
+                                                          &response.timestamp,
+                                                          &response.message_string_id);
 })
 
 CALL_PROGRAM_FUNCTION(ContinueProgramSchedule, continue_program_schedule, {
-	response.error_code = program_continue_schedule(program);
+        response.error_code = program_continue_schedule(program);
 })
 
 CALL_PROGRAM_FUNCTION(StartProgram, start_program, {
-	response.error_code = program_start(program);
+        response.error_code = program_start(program);
 })
 
 CALL_PROGRAM_FUNCTION_WITH_SESSION(GetLastSpawnedProgramProcess, get_last_spawned_program_process, {
-	response.error_code = program_get_last_spawned_process(program, session,
-	                                                       &response.process_id,
-	                                                       &response.timestamp);
+        response.error_code = program_get_last_spawned_process(program, session,
+                                                               &response.process_id,
+                                                               &response.timestamp);
 })
 
 CALL_PROGRAM_FUNCTION_WITH_SESSION(GetCustomProgramOptionNames, get_custom_program_option_names, {
-	response.error_code = program_get_custom_option_names(program, session,
-	                                                      &response.names_list_id);
+        response.error_code = program_get_custom_option_names(program, session,
+                                                              &response.names_list_id);
 })
 
 CALL_PROGRAM_FUNCTION(SetCustomProgramOptionValue, set_custom_program_option_value, {
-	response.error_code = program_set_custom_option_value(program,
-	                                                      request->name_string_id,
-	                                                      request->value_string_id);
+        response.error_code = program_set_custom_option_value(program,
+                                                              request->name_string_id,
+                                                              request->value_string_id);
 })
 
 CALL_PROGRAM_FUNCTION_WITH_SESSION(GetCustomProgramOptionValue, get_custom_program_option_value, {
-	response.error_code = program_get_custom_option_value(program, session,
-	                                                      request->name_string_id,
-	                                                      &response.value_string_id);
+        response.error_code = program_get_custom_option_value(program, session,
+                                                              request->name_string_id,
+                                                              &response.value_string_id);
 })
 
 CALL_PROGRAM_FUNCTION(RemoveCustomProgramOption, remove_custom_program_option, {
-	response.error_code = program_remove_custom_option(program,
-	                                                   request->name_string_id);
+        response.error_code = program_remove_custom_option(program,
+                                                           request->name_string_id);
 })
 
 #undef CALL_PROGRAM_FUNCTION_WITH_SESSION
 #undef CALL_PROGRAM_FUNCTION
 
 //
+// vision
+//
+
+CALL_FUNCTION(VisionCameraAvailable, vision_camera_available, {
+        response.result = camera_available();
+})
+
+CALL_FUNCTION(VisionPreselectFramesize, vision_preselect_framesize, {
+        response.result = preselect_framesize(request->width, request->height);
+})
+
+CALL_FUNCTION(VisionStartIdle, vision_start_idle, {
+        response.result = start_idle();
+})
+
+CALL_FUNCTION(VisionSetLatency, vision_set_latency, {
+        response.result = set_execution_latency(request->milliseconds);
+})
+
+CALL_FUNCTION(VisionGetResolution, vision_get_resolution, {
+        response.result = get_resolution(&response.width, &response.height);
+})
+
+CALL_FUNCTION(VisionPause, vision_pause, {
+        response.result = stop();
+})
+
+CALL_FUNCTION(VisionRestart, vision_restart, {
+        response.result = start();
+})
+
+CALL_FUNCTION(VisionQuit, vision_quit, {
+        response.result = quit();
+})
+
+CALL_FUNCTION(VisionPauseID, vision_pause_id, {
+        response.result = stop_id(request->id);
+})
+
+CALL_FUNCTION(VisionRestartID, vision_restart_id, {
+        response.result = restart_id(request->id);
+})
+
+CALL_FUNCTION(VisionChain, vision_chain, {
+        response.result = chain(request->id_first, request->id_second);
+})
+
+CALL_FUNCTION(VisionColormatchStart, vision_colormatch_start, {
+        response.result = colormatch_start(request->id,
+                                           request->min_hue,
+                                           request->max_hue,
+                                           colormatch_callback, NULL);
+})
+
+CALL_FUNCTION(VisionColormatchStop, vision_colormatch_stop, {
+        response.result = colormatch_stop(request->id);
+})
+
+CALL_FUNCTION(VisionColormatchGet, vision_colormatch_get, {
+        response.result = colormatch_get(request->id,
+                                         &response.min_hue,
+                                         &response.max_hue);
+})
+
+CALL_FUNCTION(VisionMotionStart, vision_motion_start, {
+        response.result = motiondetect_start(request->id,
+                                             motion_callback, NULL);
+})
+
+CALL_FUNCTION(VisionStream, vision_stream, {
+        response.result = streamer_stream(request->id);
+})
+
+CALL_FUNCTION(VisionSnapshot, vision_snapshot, {
+        response.result = streamer_stream(request->id);
+})
+
+
+
+//
 // misc
 //
 
 CALL_FUNCTION(GetIdentity, get_identity, {
-	base58_encode(response.uid, uint32_from_le(_uid));
-	strcpy(response.connected_uid, "0");
-	response.position = '0';
-	response.hardware_version[0] = 1; // FIXME
-	response.hardware_version[1] = 0;
-	response.hardware_version[2] = 0;
-	response.firmware_version[0] = VERSION_MAJOR;
-	response.firmware_version[1] = VERSION_MINOR;
-	response.firmware_version[2] = VERSION_RELEASE;
-	response.device_identifier = RED_BRICK_DEVICE_IDENTIFIER;
+        base58_encode(response.uid, uint32_from_le(_uid));
+        strcpy(response.connected_uid, "0");
+        response.position = '0';
+        response.hardware_version[0] = 1; // FIXME
+        response.hardware_version[1] = 0;
+        response.hardware_version[2] = 0;
+        response.firmware_version[0] = VERSION_MAJOR;
+        response.firmware_version[1] = VERSION_MINOR;
+        response.firmware_version[2] = VERSION_RELEASE;
+        response.device_identifier = RED_BRICK_DEVICE_IDENTIFIER;
 })
 
 #undef CALL_FUNCTION_WITH_SESSION
@@ -811,305 +916,371 @@ CALL_FUNCTION(GetIdentity, get_identity, {
 //
 
 int api_init(void) {
-	char base58[BASE58_MAX_LENGTH];
+        char base58[BASE58_MAX_LENGTH];
+
+        log_debug("Initializing API subsystem");
+
+        // read UID from /proc/red_brick_uid
+        if (red_brick_uid(&_uid) < 0) {
+                log_error("Could not get RED Brick UID: %s (%d)",
+                          get_errno_name(errno), errno);
 
-	log_debug("Initializing API subsystem");
+                return -1;
+        }
 
-	// read UID from /proc/red_brick_uid
-	if (red_brick_uid(&_uid) < 0) {
-		log_error("Could not get RED Brick UID: %s (%d)",
-		          get_errno_name(errno), errno);
+        log_debug("Using %s (%u) as RED Brick UID",
+                  base58_encode(base58, uint32_from_le(_uid)),
+                  uint32_from_le(_uid));
 
-		return -1;
-	}
+        api_prepare_callback((Packet *)&_async_file_read_callback,
+                             sizeof(_async_file_read_callback),
+                             CALLBACK_ASYNC_FILE_READ);
 
-	log_debug("Using %s (%u) as RED Brick UID",
-	          base58_encode(base58, uint32_from_le(_uid)),
-	          uint32_from_le(_uid));
+        api_prepare_callback((Packet *)&_async_file_write_callback,
+                             sizeof(_async_file_write_callback),
+                             CALLBACK_ASYNC_FILE_WRITE);
 
-	api_prepare_callback((Packet *)&_async_file_read_callback,
-	                     sizeof(_async_file_read_callback),
-	                     CALLBACK_ASYNC_FILE_READ);
+        api_prepare_callback((Packet *)&_file_events_occurred_callback,
+                             sizeof(_file_events_occurred_callback),
+                             CALLBACK_FILE_EVENTS_OCCURRED);
 
-	api_prepare_callback((Packet *)&_async_file_write_callback,
-	                     sizeof(_async_file_write_callback),
-	                     CALLBACK_ASYNC_FILE_WRITE);
+        api_prepare_callback((Packet *)&_process_state_changed_callback,
+                             sizeof(_process_state_changed_callback),
+                             CALLBACK_PROCESS_STATE_CHANGED);
 
-	api_prepare_callback((Packet *)&_file_events_occurred_callback,
-	                     sizeof(_file_events_occurred_callback),
-	                     CALLBACK_FILE_EVENTS_OCCURRED);
+        api_prepare_callback((Packet *)&_program_scheduler_state_changed_callback,
+                             sizeof(_program_scheduler_state_changed_callback),
+                             CALLBACK_PROGRAM_SCHEDULER_STATE_CHANGED);
 
-	api_prepare_callback((Packet *)&_process_state_changed_callback,
-	                     sizeof(_process_state_changed_callback),
-	                     CALLBACK_PROCESS_STATE_CHANGED);
+        api_prepare_callback((Packet *)&_program_process_spawned_callback,
+                             sizeof(_program_process_spawned_callback),
+                             CALLBACK_PROGRAM_PROCESS_SPAWNED);
 
-	api_prepare_callback((Packet *)&_program_scheduler_state_changed_callback,
-	                     sizeof(_program_scheduler_state_changed_callback),
-	                     CALLBACK_PROGRAM_SCHEDULER_STATE_CHANGED);
+        api_prepare_callback((Packet *)&_vision_colormatch_update_callback,
+                             sizeof(_vision_colormatch_update_callback),
+                             CALLBACK_VISION_COLORMATCH_UPDATE);
 
-	api_prepare_callback((Packet *)&_program_process_spawned_callback,
-	                     sizeof(_program_process_spawned_callback),
-	                     CALLBACK_PROGRAM_PROCESS_SPAWNED);
+        api_prepare_callback((Packet *)&_vision_motion_update_callback,
+                             sizeof(_vision_motion_update_callback),
+                             CALLBACK_VISION_MOTION_UPDATE);
 
-	return 0;
+        return 0;
 }
 
 void api_exit(void) {
-	log_debug("Shutting down API subsystem");
+        log_debug("Shutting down API subsystem");
 }
 
 uint32_t api_get_uid(void) {
-	return _uid;
+        return _uid;
 }
 
 void api_handle_request(Packet *request) {
-	#define DISPATCH_FUNCTION(function_id_suffix, packet_prefix, function_suffix) \
-		case FUNCTION_##function_id_suffix: \
-			if (request->header.length != sizeof(packet_prefix##Request)) { \
-				log_warn("Received %s request with length mismatch (actual: %u != expected: %u)", \
-				         api_get_function_name(request->header.function_id), \
-				         request->header.length, (uint32_t)sizeof(packet_prefix##Request)); \
-				api_send_response_if_expected(request, PACKET_E_INVALID_PARAMETER); \
-			} else { \
-				api_##function_suffix((packet_prefix##Request *)request); \
-			} \
-			break;
-
-	switch (request->header.function_id) {
-	// session
-	DISPATCH_FUNCTION(CREATE_SESSION,                   CreateSession,                create_session)
-	DISPATCH_FUNCTION(EXPIRE_SESSION,                   ExpireSession,                expire_session)
-	DISPATCH_FUNCTION(EXPIRE_SESSION_UNCHECKED,         ExpireSessionUnchecked,       expire_session_unchecked)
-	DISPATCH_FUNCTION(KEEP_SESSION_ALIVE,               KeepSessionAlive,             keep_session_alive)
-
-	// object
-	DISPATCH_FUNCTION(RELEASE_OBJECT,                   ReleaseObject,                release_object)
-	DISPATCH_FUNCTION(RELEASE_OBJECT_UNCHECKED,         ReleaseObjectUnchecked,       release_object_unchecked)
-
-	// string
-	DISPATCH_FUNCTION(ALLOCATE_STRING,                  AllocateString,               allocate_string)
-	DISPATCH_FUNCTION(TRUNCATE_STRING,                  TruncateString,               truncate_string)
-	DISPATCH_FUNCTION(GET_STRING_LENGTH,                GetStringLength,              get_string_length)
-	DISPATCH_FUNCTION(SET_STRING_CHUNK,                 SetStringChunk,               set_string_chunk)
-	DISPATCH_FUNCTION(GET_STRING_CHUNK,                 GetStringChunk,               get_string_chunk)
-
-	// list
-	DISPATCH_FUNCTION(ALLOCATE_LIST,                    AllocateList,                 allocate_list)
-	DISPATCH_FUNCTION(GET_LIST_LENGTH,                  GetListLength,                get_list_length)
-	DISPATCH_FUNCTION(GET_LIST_ITEM,                    GetListItem,                  get_list_item)
-	DISPATCH_FUNCTION(APPEND_TO_LIST,                   AppendToList,                 append_to_list)
-	DISPATCH_FUNCTION(REMOVE_FROM_LIST,                 RemoveFromList,               remove_from_list)
-
-	// file
-	DISPATCH_FUNCTION(OPEN_FILE,                        OpenFile,                     open_file)
-	DISPATCH_FUNCTION(CREATE_PIPE,                      CreatePipe,                   create_pipe)
-	DISPATCH_FUNCTION(GET_FILE_INFO,                    GetFileInfo,                  get_file_info)
-	DISPATCH_FUNCTION(READ_FILE,                        ReadFile,                     read_file)
-	DISPATCH_FUNCTION(READ_FILE_ASYNC,                  ReadFileAsync,                read_file_async)
-	DISPATCH_FUNCTION(ABORT_ASYNC_FILE_READ,            AbortAsyncFileRead,           abort_async_file_read)
-	DISPATCH_FUNCTION(WRITE_FILE,                       WriteFile,                    write_file)
-	DISPATCH_FUNCTION(WRITE_FILE_UNCHECKED,             WriteFileUnchecked,           write_file_unchecked)
-	DISPATCH_FUNCTION(WRITE_FILE_ASYNC,                 WriteFileAsync,               write_file_async)
-	DISPATCH_FUNCTION(SET_FILE_POSITION,                SetFilePosition,              set_file_position)
-	DISPATCH_FUNCTION(GET_FILE_POSITION,                GetFilePosition,              get_file_position)
-	DISPATCH_FUNCTION(SET_FILE_EVENTS,                  SetFileEvents,                set_file_events)
-	DISPATCH_FUNCTION(GET_FILE_EVENTS,                  GetFileEvents,                get_file_events)
-
-	// directory
-	DISPATCH_FUNCTION(OPEN_DIRECTORY,                   OpenDirectory,                open_directory)
-	DISPATCH_FUNCTION(GET_DIRECTORY_NAME,               GetDirectoryName,             get_directory_name)
-	DISPATCH_FUNCTION(GET_NEXT_DIRECTORY_ENTRY,         GetNextDirectoryEntry,        get_next_directory_entry)
-	DISPATCH_FUNCTION(REWIND_DIRECTORY,                 RewindDirectory,              rewind_directory)
-	DISPATCH_FUNCTION(CREATE_DIRECTORY,                 CreateDirectory,              create_directory)
-
-	// process
-	DISPATCH_FUNCTION(GET_PROCESSES,                    GetProcesses,                 get_processes)
-	DISPATCH_FUNCTION(SPAWN_PROCESS,                    SpawnProcess,                 spawn_process)
-	DISPATCH_FUNCTION(KILL_PROCESS,                     KillProcess,                  kill_process)
-	DISPATCH_FUNCTION(GET_PROCESS_COMMAND,              GetProcessCommand,            get_process_command)
-	DISPATCH_FUNCTION(GET_PROCESS_IDENTITY,             GetProcessIdentity,           get_process_identity)
-	DISPATCH_FUNCTION(GET_PROCESS_STDIO,                GetProcessStdio,              get_process_stdio)
-	DISPATCH_FUNCTION(GET_PROCESS_STATE,                GetProcessState,              get_process_state)
-
-	// program
-	DISPATCH_FUNCTION(GET_PROGRAMS,                     GetPrograms,                  get_programs)
-	DISPATCH_FUNCTION(DEFINE_PROGRAM,                   DefineProgram,                define_program)
-	DISPATCH_FUNCTION(PURGE_PROGRAM,                    PurgeProgram,                 purge_program)
-	DISPATCH_FUNCTION(GET_PROGRAM_IDENTIFIER,           GetProgramIdentifier,         get_program_identifier)
-	DISPATCH_FUNCTION(GET_PROGRAM_ROOT_DIRECTORY,       GetProgramRootDirectory,      get_program_root_directory)
-	DISPATCH_FUNCTION(SET_PROGRAM_COMMAND,              SetProgramCommand,            set_program_command)
-	DISPATCH_FUNCTION(GET_PROGRAM_COMMAND,              GetProgramCommand,            get_program_command)
-	DISPATCH_FUNCTION(SET_PROGRAM_STDIO_REDIRECTION,    SetProgramStdioRedirection,   set_program_stdio_redirection)
-	DISPATCH_FUNCTION(GET_PROGRAM_STDIO_REDIRECTION,    GetProgramStdioRedirection,   get_program_stdio_redirection)
-	DISPATCH_FUNCTION(SET_PROGRAM_SCHEDULE,             SetProgramSchedule,           set_program_schedule)
-	DISPATCH_FUNCTION(GET_PROGRAM_SCHEDULE,             GetProgramSchedule,           get_program_schedule)
-	DISPATCH_FUNCTION(GET_PROGRAM_SCHEDULER_STATE,      GetProgramSchedulerState,     get_program_scheduler_state)
-	DISPATCH_FUNCTION(CONTINUE_PROGRAM_SCHEDULE,        ContinueProgramSchedule,      continue_program_schedule)
-	DISPATCH_FUNCTION(START_PROGRAM,                    StartProgram,                 start_program)
-	DISPATCH_FUNCTION(GET_LAST_SPAWNED_PROGRAM_PROCESS, GetLastSpawnedProgramProcess, get_last_spawned_program_process)
-	DISPATCH_FUNCTION(GET_CUSTOM_PROGRAM_OPTION_NAMES,  GetCustomProgramOptionNames,  get_custom_program_option_names)
-	DISPATCH_FUNCTION(SET_CUSTOM_PROGRAM_OPTION_VALUE,  SetCustomProgramOptionValue,  set_custom_program_option_value)
-	DISPATCH_FUNCTION(GET_CUSTOM_PROGRAM_OPTION_VALUE,  GetCustomProgramOptionValue,  get_custom_program_option_value)
-	DISPATCH_FUNCTION(REMOVE_CUSTOM_PROGRAM_OPTION,     RemoveCustomProgramOption,    remove_custom_program_option)
-
-	// misc
-	DISPATCH_FUNCTION(GET_IDENTITY,                     GetIdentity,                  get_identity)
-
-	default:
-		log_warn("Unknown function ID %u", request->header.function_id);
-
-		api_send_response_if_expected(request, PACKET_E_FUNCTION_NOT_SUPPORTED);
-
-		break;
-	}
-
-	#undef DISPATCH_FUNCTION
+        #define DISPATCH_FUNCTION(function_id_suffix, packet_prefix, function_suffix) \
+                case FUNCTION_##function_id_suffix: \
+                        if (request->header.length != sizeof(packet_prefix##Request)) { \
+                                log_warn("Received %s request with length mismatch (actual: %u != expected: %u)", \
+                                         api_get_function_name(request->header.function_id), \
+                                         request->header.length, (uint32_t)sizeof(packet_prefix##Request)); \
+                                api_send_response_if_expected(request, PACKET_E_INVALID_PARAMETER); \
+                        } else { \
+                                api_##function_suffix((packet_prefix##Request *)request); \
+                        } \
+                        break;
+
+        switch (request->header.function_id) {
+        // session
+        DISPATCH_FUNCTION(CREATE_SESSION,                   CreateSession,                create_session)
+        DISPATCH_FUNCTION(EXPIRE_SESSION,                   ExpireSession,                expire_session)
+        DISPATCH_FUNCTION(EXPIRE_SESSION_UNCHECKED,         ExpireSessionUnchecked,       expire_session_unchecked)
+        DISPATCH_FUNCTION(KEEP_SESSION_ALIVE,               KeepSessionAlive,             keep_session_alive)
+
+        // object
+        DISPATCH_FUNCTION(RELEASE_OBJECT,                   ReleaseObject,                release_object)
+        DISPATCH_FUNCTION(RELEASE_OBJECT_UNCHECKED,         ReleaseObjectUnchecked,       release_object_unchecked)
+
+        // string
+        DISPATCH_FUNCTION(ALLOCATE_STRING,                  AllocateString,               allocate_string)
+        DISPATCH_FUNCTION(TRUNCATE_STRING,                  TruncateString,               truncate_string)
+        DISPATCH_FUNCTION(GET_STRING_LENGTH,                GetStringLength,              get_string_length)
+        DISPATCH_FUNCTION(SET_STRING_CHUNK,                 SetStringChunk,               set_string_chunk)
+        DISPATCH_FUNCTION(GET_STRING_CHUNK,                 GetStringChunk,               get_string_chunk)
+
+        // list
+        DISPATCH_FUNCTION(ALLOCATE_LIST,                    AllocateList,                 allocate_list)
+        DISPATCH_FUNCTION(GET_LIST_LENGTH,                  GetListLength,                get_list_length)
+        DISPATCH_FUNCTION(GET_LIST_ITEM,                    GetListItem,                  get_list_item)
+        DISPATCH_FUNCTION(APPEND_TO_LIST,                   AppendToList,                 append_to_list)
+        DISPATCH_FUNCTION(REMOVE_FROM_LIST,                 RemoveFromList,               remove_from_list)
+
+        // file
+        DISPATCH_FUNCTION(OPEN_FILE,                        OpenFile,                     open_file)
+        DISPATCH_FUNCTION(CREATE_PIPE,                      CreatePipe,                   create_pipe)
+        DISPATCH_FUNCTION(GET_FILE_INFO,                    GetFileInfo,                  get_file_info)
+        DISPATCH_FUNCTION(READ_FILE,                        ReadFile,                     read_file)
+        DISPATCH_FUNCTION(READ_FILE_ASYNC,                  ReadFileAsync,                read_file_async)
+        DISPATCH_FUNCTION(ABORT_ASYNC_FILE_READ,            AbortAsyncFileRead,           abort_async_file_read)
+        DISPATCH_FUNCTION(WRITE_FILE,                       WriteFile,                    write_file)
+        DISPATCH_FUNCTION(WRITE_FILE_UNCHECKED,             WriteFileUnchecked,           write_file_unchecked)
+        DISPATCH_FUNCTION(WRITE_FILE_ASYNC,                 WriteFileAsync,               write_file_async)
+        DISPATCH_FUNCTION(SET_FILE_POSITION,                SetFilePosition,              set_file_position)
+        DISPATCH_FUNCTION(GET_FILE_POSITION,                GetFilePosition,              get_file_position)
+        DISPATCH_FUNCTION(SET_FILE_EVENTS,                  SetFileEvents,                set_file_events)
+        DISPATCH_FUNCTION(GET_FILE_EVENTS,                  GetFileEvents,                get_file_events)
+
+        // directory
+        DISPATCH_FUNCTION(OPEN_DIRECTORY,                   OpenDirectory,                open_directory)
+        DISPATCH_FUNCTION(GET_DIRECTORY_NAME,               GetDirectoryName,             get_directory_name)
+        DISPATCH_FUNCTION(GET_NEXT_DIRECTORY_ENTRY,         GetNextDirectoryEntry,        get_next_directory_entry)
+        DISPATCH_FUNCTION(REWIND_DIRECTORY,                 RewindDirectory,              rewind_directory)
+        DISPATCH_FUNCTION(CREATE_DIRECTORY,                 CreateDirectory,              create_directory)
+
+        // process
+        DISPATCH_FUNCTION(GET_PROCESSES,                    GetProcesses,                 get_processes)
+        DISPATCH_FUNCTION(SPAWN_PROCESS,                    SpawnProcess,                 spawn_process)
+        DISPATCH_FUNCTION(KILL_PROCESS,                     KillProcess,                  kill_process)
+        DISPATCH_FUNCTION(GET_PROCESS_COMMAND,              GetProcessCommand,            get_process_command)
+        DISPATCH_FUNCTION(GET_PROCESS_IDENTITY,             GetProcessIdentity,           get_process_identity)
+        DISPATCH_FUNCTION(GET_PROCESS_STDIO,                GetProcessStdio,              get_process_stdio)
+        DISPATCH_FUNCTION(GET_PROCESS_STATE,                GetProcessState,              get_process_state)
+
+        // program
+        DISPATCH_FUNCTION(GET_PROGRAMS,                     GetPrograms,                  get_programs)
+        DISPATCH_FUNCTION(DEFINE_PROGRAM,                   DefineProgram,                define_program)
+        DISPATCH_FUNCTION(PURGE_PROGRAM,                    PurgeProgram,                 purge_program)
+        DISPATCH_FUNCTION(GET_PROGRAM_IDENTIFIER,           GetProgramIdentifier,         get_program_identifier)
+        DISPATCH_FUNCTION(GET_PROGRAM_ROOT_DIRECTORY,       GetProgramRootDirectory,      get_program_root_directory)
+        DISPATCH_FUNCTION(SET_PROGRAM_COMMAND,              SetProgramCommand,            set_program_command)
+        DISPATCH_FUNCTION(GET_PROGRAM_COMMAND,              GetProgramCommand,            get_program_command)
+        DISPATCH_FUNCTION(SET_PROGRAM_STDIO_REDIRECTION,    SetProgramStdioRedirection,   set_program_stdio_redirection)
+        DISPATCH_FUNCTION(GET_PROGRAM_STDIO_REDIRECTION,    GetProgramStdioRedirection,   get_program_stdio_redirection)
+        DISPATCH_FUNCTION(SET_PROGRAM_SCHEDULE,             SetProgramSchedule,           set_program_schedule)
+        DISPATCH_FUNCTION(GET_PROGRAM_SCHEDULE,             GetProgramSchedule,           get_program_schedule)
+        DISPATCH_FUNCTION(GET_PROGRAM_SCHEDULER_STATE,      GetProgramSchedulerState,     get_program_scheduler_state)
+        DISPATCH_FUNCTION(CONTINUE_PROGRAM_SCHEDULE,        ContinueProgramSchedule,      continue_program_schedule)
+        DISPATCH_FUNCTION(START_PROGRAM,                    StartProgram,                 start_program)
+        DISPATCH_FUNCTION(GET_LAST_SPAWNED_PROGRAM_PROCESS, GetLastSpawnedProgramProcess, get_last_spawned_program_process)
+        DISPATCH_FUNCTION(GET_CUSTOM_PROGRAM_OPTION_NAMES,  GetCustomProgramOptionNames,  get_custom_program_option_names)
+        DISPATCH_FUNCTION(SET_CUSTOM_PROGRAM_OPTION_VALUE,  SetCustomProgramOptionValue,  set_custom_program_option_value)
+        DISPATCH_FUNCTION(GET_CUSTOM_PROGRAM_OPTION_VALUE,  GetCustomProgramOptionValue,  get_custom_program_option_value)
+        DISPATCH_FUNCTION(REMOVE_CUSTOM_PROGRAM_OPTION,     RemoveCustomProgramOption,    remove_custom_program_option)
+
+        // vision
+        DISPATCH_FUNCTION(VISION_CAMERA_AVAILABLE,          VisionCameraAvailable,        vision_camera_available)
+        DISPATCH_FUNCTION(VISION_PRESELECT_FRAMESIZE,       VisionPreselectFramesize,     vision_preselect_framesize)
+        DISPATCH_FUNCTION(VISION_START_IDLE,                VisionStartIdle,              vision_start_idle)
+        DISPATCH_FUNCTION(VISION_SET_LATENCY,               VisionSetLatency,             vision_set_latency)
+        DISPATCH_FUNCTION(VISION_GET_RESOLUTION,            VisionGetResolution,          vision_get_resolution)
+        DISPATCH_FUNCTION(VISION_PAUSE,                     VisionPause,                  vision_pause)
+        DISPATCH_FUNCTION(VISION_RESTART,                   VisionRestart,                vision_restart)
+        DISPATCH_FUNCTION(VISION_PAUSE_ID,                  VisionPauseID,                vision_pause_id)
+        DISPATCH_FUNCTION(VISION_RESTART_ID,                VisionRestartID,              vision_restart_id)
+        DISPATCH_FUNCTION(VISION_CHAIN,                     VisionChain,                  vision_chain)
+        DISPATCH_FUNCTION(VISION_QUIT,                      VisionQuit,                   vision_quit)
+        DISPATCH_FUNCTION(VISION_COLORMATCH_START,          VisionColormatchStart,        vision_colormatch_start)
+        DISPATCH_FUNCTION(VISION_COLORMATCH_STOP,           VisionColormatchStop,         vision_colormatch_stop)
+        DISPATCH_FUNCTION(VISION_COLORMATCH_GET,            VisionColormatchGet,          vision_colormatch_get)
+        DISPATCH_FUNCTION(VISION_MOTION_START,              VisionMotionStart,            vision_motion_start)
+        DISPATCH_FUNCTION(VISION_STREAM,                    VisionStream,                 vision_stream)
+        DISPATCH_FUNCTION(VISION_SNAPSHOT,                  VisionSnapshot,               vision_snapshot)
+
+        // misc
+        DISPATCH_FUNCTION(GET_IDENTITY,                     GetIdentity,                  get_identity)
+
+        default:
+                log_warn("Unknown function ID %u", request->header.function_id);
+
+                api_send_response_if_expected(request, PACKET_E_FUNCTION_NOT_SUPPORTED);
+
+                break;
+        }
+
+        #undef DISPATCH_FUNCTION
 }
 
 const char *api_get_function_name(int function_id) {
-	switch (function_id) {
-	// string
-	case FUNCTION_CREATE_SESSION:                   return "create-session";
-	case FUNCTION_EXPIRE_SESSION:                   return "expire-session";
-	case FUNCTION_EXPIRE_SESSION_UNCHECKED:         return "expire-session-unchecked";
-	case FUNCTION_KEEP_SESSION_ALIVE:               return "keep-session-alive";
-
-	// object
-	case FUNCTION_RELEASE_OBJECT:                   return "release-object";
-	case FUNCTION_RELEASE_OBJECT_UNCHECKED:         return "release-object-unchecked";
-
-	// string
-	case FUNCTION_ALLOCATE_STRING:                  return "allocate-string";
-	case FUNCTION_TRUNCATE_STRING:                  return "truncate-string";
-	case FUNCTION_GET_STRING_LENGTH:                return "get-string-length";
-	case FUNCTION_SET_STRING_CHUNK:                 return "set-string-chunk";
-	case FUNCTION_GET_STRING_CHUNK:                 return "get-string-chunk";
-
-	// list
-	case FUNCTION_ALLOCATE_LIST:                    return "allocate-list";
-	case FUNCTION_GET_LIST_LENGTH:                  return "get-list-length";
-	case FUNCTION_GET_LIST_ITEM:                    return "get-list-item";
-	case FUNCTION_APPEND_TO_LIST:                   return "append-to-list";
-	case FUNCTION_REMOVE_FROM_LIST:                 return "remove-from-list";
-
-	// file
-	case FUNCTION_OPEN_FILE:                        return "open-file";
-	case FUNCTION_CREATE_PIPE:                      return "create-pipe";
-	case FUNCTION_GET_FILE_INFO:                    return "get-file-info";
-	case FUNCTION_READ_FILE:                        return "read-file";
-	case FUNCTION_READ_FILE_ASYNC:                  return "read-file-async";
-	case FUNCTION_ABORT_ASYNC_FILE_READ:            return "abort-async-file-read";
-	case FUNCTION_WRITE_FILE:                       return "write-file";
-	case FUNCTION_WRITE_FILE_UNCHECKED:             return "write-file-unchecked";
-	case FUNCTION_WRITE_FILE_ASYNC:                 return "write-file-async";
-	case FUNCTION_SET_FILE_POSITION:                return "set-file-position";
-	case FUNCTION_GET_FILE_POSITION:                return "get-file-position";
-	case FUNCTION_SET_FILE_EVENTS:                  return "set-file-events";
-	case FUNCTION_GET_FILE_EVENTS:                  return "get-file-events";
-	case CALLBACK_ASYNC_FILE_READ:                  return "async-file-read";
-	case CALLBACK_ASYNC_FILE_WRITE:                 return "async-file-write";
-	case CALLBACK_FILE_EVENTS_OCCURRED:             return "file-events-occurred";
-
-	// directory
-	case FUNCTION_OPEN_DIRECTORY:                   return "open-directory";
-	case FUNCTION_GET_DIRECTORY_NAME:               return "get-directory-name";
-	case FUNCTION_GET_NEXT_DIRECTORY_ENTRY:         return "get-next-directory-entry";
-	case FUNCTION_REWIND_DIRECTORY:                 return "rewind-directory";
-	case FUNCTION_CREATE_DIRECTORY:                 return "create-directory";
-
-	// process
-	case FUNCTION_GET_PROCESSES:                    return "get-processes";
-	case FUNCTION_SPAWN_PROCESS:                    return "spawn-process";
-	case FUNCTION_KILL_PROCESS:                     return "kill-process";
-	case FUNCTION_GET_PROCESS_COMMAND:              return "get-process-command";
-	case FUNCTION_GET_PROCESS_IDENTITY:             return "get-process-identity";
-	case FUNCTION_GET_PROCESS_STDIO:                return "get-process-stdio";
-	case FUNCTION_GET_PROCESS_STATE:                return "get-process-state";
-	case CALLBACK_PROCESS_STATE_CHANGED:            return "process-state-changed";
-
-	// program
-	case FUNCTION_GET_PROGRAMS:                     return "get-programs";
-	case FUNCTION_DEFINE_PROGRAM:                   return "define-program";
-	case FUNCTION_PURGE_PROGRAM:                    return "purge-program";
-	case FUNCTION_GET_PROGRAM_IDENTIFIER:           return "get-program-identifier";
-	case FUNCTION_GET_PROGRAM_ROOT_DIRECTORY:       return "get-program-root-directory";
-	case FUNCTION_SET_PROGRAM_COMMAND:              return "set-program-command";
-	case FUNCTION_GET_PROGRAM_COMMAND:              return "get-program-command";
-	case FUNCTION_SET_PROGRAM_STDIO_REDIRECTION:    return "set-program-stdio-redirection";
-	case FUNCTION_GET_PROGRAM_STDIO_REDIRECTION:    return "get-program-stdio-redirection";
-	case FUNCTION_SET_PROGRAM_SCHEDULE:             return "set-program-schedule";
-	case FUNCTION_GET_PROGRAM_SCHEDULE:             return "get-program-schedule";
-	case FUNCTION_GET_PROGRAM_SCHEDULER_STATE:      return "get-program-scheduler-state";
-	case FUNCTION_CONTINUE_PROGRAM_SCHEDULE:        return "continue-program-schedule";
-	case FUNCTION_START_PROGRAM:                    return "start-program";
-	case FUNCTION_GET_LAST_SPAWNED_PROGRAM_PROCESS: return "get-last-spawned-program-process";
-	case FUNCTION_GET_CUSTOM_PROGRAM_OPTION_NAMES:  return "get-custom-program-option-names";
-	case FUNCTION_SET_CUSTOM_PROGRAM_OPTION_VALUE:  return "set-custom-program-option-value";
-	case FUNCTION_GET_CUSTOM_PROGRAM_OPTION_VALUE:  return "get-custom-program-option-value";
-	case FUNCTION_REMOVE_CUSTOM_PROGRAM_OPTION:     return "remove-custom-program-option";
-	case CALLBACK_PROGRAM_PROCESS_SPAWNED:          return "program-process-spawned";
-	case CALLBACK_PROGRAM_SCHEDULER_STATE_CHANGED:  return "program-scheduler-state-changed";
-
-	// misc
-	case FUNCTION_GET_IDENTITY:                     return "get-identity";
-
-	default:                                        return "<unknown>";
-	}
+        switch (function_id) {
+        // string
+        case FUNCTION_CREATE_SESSION:                   return "create-session";
+        case FUNCTION_EXPIRE_SESSION:                   return "expire-session";
+        case FUNCTION_EXPIRE_SESSION_UNCHECKED:         return "expire-session-unchecked";
+        case FUNCTION_KEEP_SESSION_ALIVE:               return "keep-session-alive";
+
+        // object
+        case FUNCTION_RELEASE_OBJECT:                   return "release-object";
+        case FUNCTION_RELEASE_OBJECT_UNCHECKED:         return "release-object-unchecked";
+
+        // string
+        case FUNCTION_ALLOCATE_STRING:                  return "allocate-string";
+        case FUNCTION_TRUNCATE_STRING:                  return "truncate-string";
+        case FUNCTION_GET_STRING_LENGTH:                return "get-string-length";
+        case FUNCTION_SET_STRING_CHUNK:                 return "set-string-chunk";
+        case FUNCTION_GET_STRING_CHUNK:                 return "get-string-chunk";
+
+        // list
+        case FUNCTION_ALLOCATE_LIST:                    return "allocate-list";
+        case FUNCTION_GET_LIST_LENGTH:                  return "get-list-length";
+        case FUNCTION_GET_LIST_ITEM:                    return "get-list-item";
+        case FUNCTION_APPEND_TO_LIST:                   return "append-to-list";
+        case FUNCTION_REMOVE_FROM_LIST:                 return "remove-from-list";
+
+        // file
+        case FUNCTION_OPEN_FILE:                        return "open-file";
+        case FUNCTION_CREATE_PIPE:                      return "create-pipe";
+        case FUNCTION_GET_FILE_INFO:                    return "get-file-info";
+        case FUNCTION_READ_FILE:                        return "read-file";
+        case FUNCTION_READ_FILE_ASYNC:                  return "read-file-async";
+        case FUNCTION_ABORT_ASYNC_FILE_READ:            return "abort-async-file-read";
+        case FUNCTION_WRITE_FILE:                       return "write-file";
+        case FUNCTION_WRITE_FILE_UNCHECKED:             return "write-file-unchecked";
+        case FUNCTION_WRITE_FILE_ASYNC:                 return "write-file-async";
+        case FUNCTION_SET_FILE_POSITION:                return "set-file-position";
+        case FUNCTION_GET_FILE_POSITION:                return "get-file-position";
+        case FUNCTION_SET_FILE_EVENTS:                  return "set-file-events";
+        case FUNCTION_GET_FILE_EVENTS:                  return "get-file-events";
+        case CALLBACK_ASYNC_FILE_READ:                  return "async-file-read";
+        case CALLBACK_ASYNC_FILE_WRITE:                 return "async-file-write";
+        case CALLBACK_FILE_EVENTS_OCCURRED:             return "file-events-occurred";
+
+        // directory
+        case FUNCTION_OPEN_DIRECTORY:                   return "open-directory";
+        case FUNCTION_GET_DIRECTORY_NAME:               return "get-directory-name";
+        case FUNCTION_GET_NEXT_DIRECTORY_ENTRY:         return "get-next-directory-entry";
+        case FUNCTION_REWIND_DIRECTORY:                 return "rewind-directory";
+        case FUNCTION_CREATE_DIRECTORY:                 return "create-directory";
+
+        // process
+        case FUNCTION_GET_PROCESSES:                    return "get-processes";
+        case FUNCTION_SPAWN_PROCESS:                    return "spawn-process";
+        case FUNCTION_KILL_PROCESS:                     return "kill-process";
+        case FUNCTION_GET_PROCESS_COMMAND:              return "get-process-command";
+        case FUNCTION_GET_PROCESS_IDENTITY:             return "get-process-identity";
+        case FUNCTION_GET_PROCESS_STDIO:                return "get-process-stdio";
+        case FUNCTION_GET_PROCESS_STATE:                return "get-process-state";
+        case CALLBACK_PROCESS_STATE_CHANGED:            return "process-state-changed";
+
+        // program
+        case FUNCTION_GET_PROGRAMS:                     return "get-programs";
+        case FUNCTION_DEFINE_PROGRAM:                   return "define-program";
+        case FUNCTION_PURGE_PROGRAM:                    return "purge-program";
+        case FUNCTION_GET_PROGRAM_IDENTIFIER:           return "get-program-identifier";
+        case FUNCTION_GET_PROGRAM_ROOT_DIRECTORY:       return "get-program-root-directory";
+        case FUNCTION_SET_PROGRAM_COMMAND:              return "set-program-command";
+        case FUNCTION_GET_PROGRAM_COMMAND:              return "get-program-command";
+        case FUNCTION_SET_PROGRAM_STDIO_REDIRECTION:    return "set-program-stdio-redirection";
+        case FUNCTION_GET_PROGRAM_STDIO_REDIRECTION:    return "get-program-stdio-redirection";
+        case FUNCTION_SET_PROGRAM_SCHEDULE:             return "set-program-schedule";
+        case FUNCTION_GET_PROGRAM_SCHEDULE:             return "get-program-schedule";
+        case FUNCTION_GET_PROGRAM_SCHEDULER_STATE:      return "get-program-scheduler-state";
+        case FUNCTION_CONTINUE_PROGRAM_SCHEDULE:        return "continue-program-schedule";
+        case FUNCTION_START_PROGRAM:                    return "start-program";
+        case FUNCTION_GET_LAST_SPAWNED_PROGRAM_PROCESS: return "get-last-spawned-program-process";
+        case FUNCTION_GET_CUSTOM_PROGRAM_OPTION_NAMES:  return "get-custom-program-option-names";
+        case FUNCTION_SET_CUSTOM_PROGRAM_OPTION_VALUE:  return "set-custom-program-option-value";
+        case FUNCTION_GET_CUSTOM_PROGRAM_OPTION_VALUE:  return "get-custom-program-option-value";
+        case FUNCTION_REMOVE_CUSTOM_PROGRAM_OPTION:     return "remove-custom-program-option";
+        case CALLBACK_PROGRAM_PROCESS_SPAWNED:          return "program-process-spawned";
+        case CALLBACK_PROGRAM_SCHEDULER_STATE_CHANGED:  return "program-scheduler-state-changed";
+
+        case FUNCTION_VISION_CAMERA_AVAILABLE:          return "vision-camera-available";
+        case FUNCTION_VISION_PRESELECT_FRAMESIZE:       return "vision-preselect-framesize";
+        case FUNCTION_VISION_START_IDLE:                return "vision-start-idle";
+        case FUNCTION_VISION_SET_LATENCY:               return "vision-set-latency";
+        case FUNCTION_VISION_GET_RESOLUTION:            return "vision-get-resolution";
+        case FUNCTION_VISION_PAUSE:                     return "vision-pause";
+        case FUNCTION_VISION_RESTART:                   return "vision-restart";
+        case FUNCTION_VISION_QUIT:                      return "vision-quit";
+        case FUNCTION_VISION_PAUSE_ID:                  return "vision-pause-id";
+        case FUNCTION_VISION_RESTART_ID:                return "vision-restart-id";
+        case FUNCTION_VISION_CHAIN:                     return "vision-chain";
+        case FUNCTION_VISION_COLORMATCH_START:          return "vision-colormatch-start";
+        case FUNCTION_VISION_COLORMATCH_STOP:           return "vision-colormatch-stop";
+        case FUNCTION_VISION_COLORMATCH_GET:            return "vision-colormatch-get";
+        case CALLBACK_VISION_COLORMATCH_UPDATE:         return "vision-colortrack-update";
+        case FUNCTION_VISION_MOTION_START:              return "vision-motion-start";
+        case CALLBACK_VISION_MOTION_UPDATE:             return "vision-colortrack-update";
+        case FUNCTION_VISION_STREAM:                    return "vision-stream";
+        case FUNCTION_VISION_SNAPSHOT:                  return "vision-snapshot";
+
+        // misc
+        case FUNCTION_GET_IDENTITY:                     return "get-identity";
+
+        default:                                        return "<unknown>";
+        }
 }
 
 void api_send_async_file_read_callback(ObjectID file_id, APIE error_code,
                                        uint8_t *buffer, uint8_t length_read) {
-	_async_file_read_callback.file_id = file_id;
-	_async_file_read_callback.error_code = error_code;
-	_async_file_read_callback.length_read = length_read;
+        _async_file_read_callback.file_id = file_id;
+        _async_file_read_callback.error_code = error_code;
+        _async_file_read_callback.length_read = length_read;
 
-	// buffer can be NULL if length_read is zero
-	if (length_read > 0) {
-		memcpy(_async_file_read_callback.buffer, buffer, length_read);
-	}
+        // buffer can be NULL if length_read is zero
+        if (length_read > 0) {
+                memcpy(_async_file_read_callback.buffer, buffer, length_read);
+        }
 
-	// memset'ing the rest of the buffer to zero ensures that no random
-	// heap/stack data can leak to the client
-	memset(_async_file_read_callback.buffer + length_read, 0,
-	       sizeof(_async_file_read_callback.buffer) - length_read);
+        // memset'ing the rest of the buffer to zero ensures that no random
+        // heap/stack data can leak to the client
+        memset(_async_file_read_callback.buffer + length_read, 0,
+               sizeof(_async_file_read_callback.buffer) - length_read);
 
-	network_dispatch_response((Packet *)&_async_file_read_callback);
+        network_dispatch_response((Packet *)&_async_file_read_callback);
 }
 
 void api_send_async_file_write_callback(ObjectID file_id, APIE error_code,
                                         uint8_t length_written) {
-	_async_file_write_callback.file_id = file_id;
-	_async_file_write_callback.error_code = error_code;
-	_async_file_write_callback.length_written = length_written;
+        _async_file_write_callback.file_id = file_id;
+        _async_file_write_callback.error_code = error_code;
+        _async_file_write_callback.length_written = length_written;
 
-	network_dispatch_response((Packet *)&_async_file_write_callback);
+        network_dispatch_response((Packet *)&_async_file_write_callback);
 }
 
 void api_send_file_events_occurred_callback(ObjectID file_id, uint16_t events) {
-	_file_events_occurred_callback.file_id = file_id;
-	_file_events_occurred_callback.events = events;
+        _file_events_occurred_callback.file_id = file_id;
+        _file_events_occurred_callback.events = events;
 
-	network_dispatch_response((Packet *)&_file_events_occurred_callback);
+        network_dispatch_response((Packet *)&_file_events_occurred_callback);
 }
 
 void api_send_process_state_changed_callback(ObjectID process_id, uint8_t state,
                                              uint64_t timestamp, uint8_t exit_code) {
-	_process_state_changed_callback.process_id = process_id;
-	_process_state_changed_callback.state = state;
-	_process_state_changed_callback.timestamp = timestamp;
-	_process_state_changed_callback.exit_code = exit_code;
+        _process_state_changed_callback.process_id = process_id;
+        _process_state_changed_callback.state = state;
+        _process_state_changed_callback.timestamp = timestamp;
+        _process_state_changed_callback.exit_code = exit_code;
 
-	network_dispatch_response((Packet *)&_process_state_changed_callback);
+        network_dispatch_response((Packet *)&_process_state_changed_callback);
 }
 
 void api_send_program_scheduler_state_changed_callback(ObjectID program_id) {
-	_program_scheduler_state_changed_callback.program_id = program_id;
+        _program_scheduler_state_changed_callback.program_id = program_id;
 
-	network_dispatch_response((Packet *)&_program_scheduler_state_changed_callback);
+        network_dispatch_response((Packet *)&_program_scheduler_state_changed_callback);
 }
 
 void api_send_program_process_spawned_callback(ObjectID program_id) {
-	_program_process_spawned_callback.program_id = program_id;
+        _program_process_spawned_callback.program_id = program_id;
+
+        network_dispatch_response((Packet *)&_program_process_spawned_callback);
+}
+
+void api_send_vision_colormatch_update_callback(int8_t id, int32_t x, int32_t y) {
+        _vision_colormatch_update_callback.id = id;
+        _vision_colormatch_update_callback.x = x;
+        _vision_colormatch_update_callback.y = y;
+
+        network_dispatch_response((Packet *)&_vision_colormatch_update_callback);
+}
+
+void api_send_vision_motion_update_callback(int8_t id, int16_t x, int16_t y,
+                                            int16_t width, int16_t height) {
+        _vision_motion_update_callback.id = id;
+        _vision_motion_update_callback.x = x;
+        _vision_motion_update_callback.y = y;
+        _vision_motion_update_callback.width = width;
+        _vision_motion_update_callback.height = height;
 
-	network_dispatch_response((Packet *)&_program_process_spawned_callback);
+        network_dispatch_response((Packet *)&_vision_motion_update_callback);
 }
diff --git a/src/redapid/api.h b/src/redapid/api.h
index 79d3107..b7a1f63 100644
--- a/src/redapid/api.h
+++ b/src/redapid/api.h
@@ -52,4 +52,7 @@ void api_send_process_state_changed_callback(ObjectID process_id, uint8_t state,
 void api_send_program_scheduler_state_changed_callback(ObjectID process_id);
 void api_send_program_process_spawned_callback(ObjectID process_id);
 
+void api_send_vision_colormatch_update_callback(int8_t id, int32_t x, int32_t y);
+void api_send_vision_motion_update_callback(int8_t id, int16_t x, int16_t y,
+                                            int16_t width, int16_t height);
 #endif // REDAPID_API_H
diff --git a/src/redapid/api_packet.h b/src/redapid/api_packet.h
index aa59a25..689dc31 100644
--- a/src/redapid/api_packet.h
+++ b/src/redapid/api_packet.h
@@ -35,40 +35,40 @@
 //
 
 typedef struct {
-	PacketHeader header;
-	uint32_t lifetime;
+        PacketHeader header;
+        uint32_t lifetime;
 } ATTRIBUTE_PACKED CreateSessionRequest;
 
 typedef struct {
-	PacketHeader header;
-	uint8_t error_code;
-	uint16_t session_id;
+        PacketHeader header;
+        uint8_t error_code;
+        uint16_t session_id;
 } ATTRIBUTE_PACKED CreateSessionResponse;
 
 typedef struct {
-	PacketHeader header;
-	uint16_t session_id;
+        PacketHeader header;
+        uint16_t session_id;
 } ATTRIBUTE_PACKED ExpireSessionRequest;
 
 typedef struct {
-	PacketHeader header;
-	uint8_t error_code;
+        PacketHeader header;
+        uint8_t error_code;
 } ATTRIBUTE_PACKED ExpireSessionResponse;
 
 typedef struct {
-	PacketHeader header;
-	uint16_t session_id;
+        PacketHeader header;
+        uint16_t session_id;
 } ATTRIBUTE_PACKED ExpireSessionUncheckedRequest;
 
 typedef struct {
-	PacketHeader header;
-	uint16_t session_id;
-	uint32_t lifetime;
+        PacketHeader header;
+        uint16_t session_id;
+        uint32_t lifetime;
 } ATTRIBUTE_PACKED KeepSessionAliveRequest;
 
 typedef struct {
-	PacketHeader header;
-	uint8_t error_code;
+        PacketHeader header;
+        uint8_t error_code;
 } ATTRIBUTE_PACKED KeepSessionAliveResponse;
 
 //
@@ -76,20 +76,20 @@ typedef struct {
 //
 
 typedef struct {
-	PacketHeader header;
-	uint16_t object_id;
-	uint16_t session_id;
+        PacketHeader header;
+        uint16_t object_id;
+        uint16_t session_id;
 } ATTRIBUTE_PACKED ReleaseObjectRequest;
 
 typedef struct {
-	PacketHeader header;
-	uint8_t error_code;
+        PacketHeader header;
+        uint8_t error_code;
 } ATTRIBUTE_PACKED ReleaseObjectResponse;
 
 typedef struct {
-	PacketHeader header;
-	uint16_t object_id;
-	uint16_t session_id;
+        PacketHeader header;
+        uint16_t object_id;
+        uint16_t session_id;
 } ATTRIBUTE_PACKED ReleaseObjectUncheckedRequest;
 
 //
@@ -97,62 +97,62 @@ typedef struct {
 //
 
 typedef struct {
-	PacketHeader header;
-	uint32_t length_to_reserve;
-	char buffer[STRING_MAX_ALLOCATE_BUFFER_LENGTH];
-	uint16_t session_id;
+        PacketHeader header;
+        uint32_t length_to_reserve;
+        char buffer[STRING_MAX_ALLOCATE_BUFFER_LENGTH];
+        uint16_t session_id;
 } ATTRIBUTE_PACKED AllocateStringRequest;
 
 typedef struct {
-	PacketHeader header;
-	uint8_t error_code;
-	uint16_t string_id;
+        PacketHeader header;
+        uint8_t error_code;
+        uint16_t string_id;
 } ATTRIBUTE_PACKED AllocateStringResponse;
 
 typedef struct {
-	PacketHeader header;
-	uint16_t string_id;
-	uint32_t length;
+        PacketHeader header;
+        uint16_t string_id;
+        uint32_t length;
 } ATTRIBUTE_PACKED TruncateStringRequest;
 
 typedef struct {
-	PacketHeader header;
-	uint8_t error_code;
+        PacketHeader header;
+        uint8_t error_code;
 } ATTRIBUTE_PACKED TruncateStringResponse;
 
 typedef struct {
-	PacketHeader header;
-	uint16_t string_id;
+        PacketHeader header;
+        uint16_t string_id;
 } ATTRIBUTE_PACKED GetStringLengthRequest;
 
 typedef struct {
-	PacketHeader header;
-	uint8_t error_code;
-	uint32_t length;
+        PacketHeader header;
+        uint8_t error_code;
+        uint32_t length;
 } ATTRIBUTE_PACKED GetStringLengthResponse;
 
 typedef struct {
-	PacketHeader header;
-	uint16_t string_id;
-	uint32_t offset;
-	char buffer[STRING_MAX_SET_CHUNK_BUFFER_LENGTH];
+        PacketHeader header;
+        uint16_t string_id;
+        uint32_t offset;
+        char buffer[STRING_MAX_SET_CHUNK_BUFFER_LENGTH];
 } ATTRIBUTE_PACKED SetStringChunkRequest;
 
 typedef struct {
-	PacketHeader header;
-	uint8_t error_code;
+        PacketHeader header;
+        uint8_t error_code;
 } ATTRIBUTE_PACKED SetStringChunkResponse;
 
 typedef struct {
-	PacketHeader header;
-	uint16_t string_id;
-	uint32_t offset;
+        PacketHeader header;
+        uint16_t string_id;
+        uint32_t offset;
 } ATTRIBUTE_PACKED GetStringChunkRequest;
 
 typedef struct {
-	PacketHeader header;
-	uint8_t error_code;
-	char buffer[STRING_MAX_GET_CHUNK_BUFFER_LENGTH];
+        PacketHeader header;
+        uint8_t error_code;
+        char buffer[STRING_MAX_GET_CHUNK_BUFFER_LENGTH];
 } ATTRIBUTE_PACKED GetStringChunkResponse;
 
 //
@@ -160,62 +160,62 @@ typedef struct {
 //
 
 typedef struct {
-	PacketHeader header;
-	uint16_t length_to_reserve;
-	uint16_t session_id;
+        PacketHeader header;
+        uint16_t length_to_reserve;
+        uint16_t session_id;
 } ATTRIBUTE_PACKED AllocateListRequest;
 
 typedef struct {
-	PacketHeader header;
-	uint8_t error_code;
-	uint16_t list_id;
+        PacketHeader header;
+        uint8_t error_code;
+        uint16_t list_id;
 } ATTRIBUTE_PACKED AllocateListResponse;
 
 typedef struct {
-	PacketHeader header;
-	uint16_t list_id;
+        PacketHeader header;
+        uint16_t list_id;
 } ATTRIBUTE_PACKED GetListLengthRequest;
 
 typedef struct {
-	PacketHeader header;
-	uint8_t error_code;
-	uint16_t length;
+        PacketHeader header;
+        uint8_t error_code;
+        uint16_t length;
 } ATTRIBUTE_PACKED GetListLengthResponse;
 
 typedef struct {
-	PacketHeader header;
-	uint16_t list_id;
-	uint16_t index;
-	uint16_t session_id;
+        PacketHeader header;
+        uint16_t list_id;
+        uint16_t index;
+        uint16_t session_id;
 } ATTRIBUTE_PACKED GetListItemRequest;
 
 typedef struct {
-	PacketHeader header;
-	uint8_t error_code;
-	uint16_t item_object_id;
-	uint8_t type;
+        PacketHeader header;
+        uint8_t error_code;
+        uint16_t item_object_id;
+        uint8_t type;
 } ATTRIBUTE_PACKED GetListItemResponse;
 
 typedef struct {
-	PacketHeader header;
-	uint16_t list_id;
-	uint16_t item_object_id;
+        PacketHeader header;
+        uint16_t list_id;
+        uint16_t item_object_id;
 } ATTRIBUTE_PACKED AppendToListRequest;
 
 typedef struct {
-	PacketHeader header;
-	uint8_t error_code;
+        PacketHeader header;
+        uint8_t error_code;
 } ATTRIBUTE_PACKED AppendToListResponse;
 
 typedef struct {
-	PacketHeader header;
-	uint16_t list_id;
-	uint16_t index;
+        PacketHeader header;
+        uint16_t list_id;
+        uint16_t index;
 } ATTRIBUTE_PACKED RemoveFromListRequest;
 
 typedef struct {
-	PacketHeader header;
-	uint8_t error_code;
+        PacketHeader header;
+        uint8_t error_code;
 } ATTRIBUTE_PACKED RemoveFromListResponse;
 
 //
@@ -223,176 +223,176 @@ typedef struct {
 //
 
 typedef struct {
-	PacketHeader header;
-	uint16_t name_string_id;
-	uint32_t flags;
-	uint16_t permissions;
-	uint32_t uid;
-	uint32_t gid;
-	uint16_t session_id;
+        PacketHeader header;
+        uint16_t name_string_id;
+        uint32_t flags;
+        uint16_t permissions;
+        uint32_t uid;
+        uint32_t gid;
+        uint16_t session_id;
 } ATTRIBUTE_PACKED OpenFileRequest;
 
 typedef struct {
-	PacketHeader header;
-	uint8_t error_code;
-	uint16_t file_id;
+        PacketHeader header;
+        uint8_t error_code;
+        uint16_t file_id;
 } ATTRIBUTE_PACKED OpenFileResponse;
 
 typedef struct {
-	PacketHeader header;
-	uint32_t flags;
-	uint64_t length;
-	uint16_t session_id;
+        PacketHeader header;
+        uint32_t flags;
+        uint64_t length;
+        uint16_t session_id;
 } ATTRIBUTE_PACKED CreatePipeRequest;
 
 typedef struct {
-	PacketHeader header;
-	uint8_t error_code;
-	uint16_t file_id;
+        PacketHeader header;
+        uint8_t error_code;
+        uint16_t file_id;
 } ATTRIBUTE_PACKED CreatePipeResponse;
 
 typedef struct {
-	PacketHeader header;
-	uint16_t file_id;
-	uint16_t session_id;
+        PacketHeader header;
+        uint16_t file_id;
+        uint16_t session_id;
 } ATTRIBUTE_PACKED GetFileInfoRequest;
 
 typedef struct {
-	PacketHeader header;
-	uint8_t error_code;
-	uint8_t type;
-	uint16_t name_string_id;
-	uint32_t flags;
-	uint16_t permissions;
-	uint32_t uid;
-	uint32_t gid;
-	uint64_t length;
-	uint64_t access_timestamp;
-	uint64_t modification_timestamp;
-	uint64_t status_change_timestamp;
+        PacketHeader header;
+        uint8_t error_code;
+        uint8_t type;
+        uint16_t name_string_id;
+        uint32_t flags;
+        uint16_t permissions;
+        uint32_t uid;
+        uint32_t gid;
+        uint64_t length;
+        uint64_t access_timestamp;
+        uint64_t modification_timestamp;
+        uint64_t status_change_timestamp;
 } ATTRIBUTE_PACKED GetFileInfoResponse;
 
 typedef struct {
-	PacketHeader header;
-	uint16_t file_id;
-	uint8_t length_to_read;
+        PacketHeader header;
+        uint16_t file_id;
+        uint8_t length_to_read;
 } ATTRIBUTE_PACKED ReadFileRequest;
 
 typedef struct {
-	PacketHeader header;
-	uint8_t error_code;
-	uint8_t buffer[FILE_MAX_READ_BUFFER_LENGTH];
-	uint8_t length_read;
+        PacketHeader header;
+        uint8_t error_code;
+        uint8_t buffer[FILE_MAX_READ_BUFFER_LENGTH];
+        uint8_t length_read;
 } ATTRIBUTE_PACKED ReadFileResponse;
 
 typedef struct {
-	PacketHeader header;
-	uint16_t file_id;
-	uint64_t length_to_read;
+        PacketHeader header;
+        uint16_t file_id;
+        uint64_t length_to_read;
 } ATTRIBUTE_PACKED ReadFileAsyncRequest;
 
 typedef struct {
-	PacketHeader header;
-	uint16_t file_id;
+        PacketHeader header;
+        uint16_t file_id;
 } ATTRIBUTE_PACKED AbortAsyncFileReadRequest;
 
 typedef struct {
-	PacketHeader header;
-	uint8_t error_code;
+        PacketHeader header;
+        uint8_t error_code;
 } ATTRIBUTE_PACKED AbortAsyncFileReadResponse;
 
 typedef struct {
-	PacketHeader header;
-	uint16_t file_id;
-	uint8_t buffer[FILE_MAX_WRITE_BUFFER_LENGTH];
-	uint8_t length_to_write;
+        PacketHeader header;
+        uint16_t file_id;
+        uint8_t buffer[FILE_MAX_WRITE_BUFFER_LENGTH];
+        uint8_t length_to_write;
 } ATTRIBUTE_PACKED WriteFileRequest;
 
 typedef struct {
-	PacketHeader header;
-	uint8_t error_code;
-	uint8_t length_written;
+        PacketHeader header;
+        uint8_t error_code;
+        uint8_t length_written;
 } ATTRIBUTE_PACKED WriteFileResponse;
 
 typedef struct {
-	PacketHeader header;
-	uint16_t file_id;
-	uint8_t buffer[FILE_MAX_WRITE_UNCHECKED_BUFFER_LENGTH];
-	uint8_t length_to_write;
+        PacketHeader header;
+        uint16_t file_id;
+        uint8_t buffer[FILE_MAX_WRITE_UNCHECKED_BUFFER_LENGTH];
+        uint8_t length_to_write;
 } ATTRIBUTE_PACKED WriteFileUncheckedRequest;
 
 typedef struct {
-	PacketHeader header;
-	uint16_t file_id;
-	uint8_t buffer[FILE_MAX_WRITE_ASYNC_BUFFER_LENGTH];
-	uint8_t length_to_write;
+        PacketHeader header;
+        uint16_t file_id;
+        uint8_t buffer[FILE_MAX_WRITE_ASYNC_BUFFER_LENGTH];
+        uint8_t length_to_write;
 } ATTRIBUTE_PACKED WriteFileAsyncRequest;
 
 typedef struct {
-	PacketHeader header;
-	uint16_t file_id;
-	int64_t offset;
-	uint8_t origin;
+        PacketHeader header;
+        uint16_t file_id;
+        int64_t offset;
+        uint8_t origin;
 } ATTRIBUTE_PACKED SetFilePositionRequest;
 
 typedef struct {
-	PacketHeader header;
-	uint8_t error_code;
-	uint64_t position;
+        PacketHeader header;
+        uint8_t error_code;
+        uint64_t position;
 } ATTRIBUTE_PACKED SetFilePositionResponse;
 
 typedef struct {
-	PacketHeader header;
-	uint16_t file_id;
+        PacketHeader header;
+        uint16_t file_id;
 } ATTRIBUTE_PACKED GetFilePositionRequest;
 
 typedef struct {
-	PacketHeader header;
-	uint8_t error_code;
-	uint64_t position;
+        PacketHeader header;
+        uint8_t error_code;
+        uint64_t position;
 } ATTRIBUTE_PACKED GetFilePositionResponse;
 
 typedef struct {
-	PacketHeader header;
-	uint16_t file_id;
-	uint16_t events;
+        PacketHeader header;
+        uint16_t file_id;
+        uint16_t events;
 } ATTRIBUTE_PACKED SetFileEventsRequest;
 
 typedef struct {
-	PacketHeader header;
-	uint8_t error_code;
+        PacketHeader header;
+        uint8_t error_code;
 } ATTRIBUTE_PACKED SetFileEventsResponse;
 
 typedef struct {
-	PacketHeader header;
-	uint16_t file_id;
+        PacketHeader header;
+        uint16_t file_id;
 } ATTRIBUTE_PACKED GetFileEventsRequest;
 
 typedef struct {
-	PacketHeader header;
-	uint8_t error_code;
-	uint16_t events;
+        PacketHeader header;
+        uint8_t error_code;
+        uint16_t events;
 } ATTRIBUTE_PACKED GetFileEventsResponse;
 
 typedef struct {
-	PacketHeader header;
-	uint16_t file_id;
-	uint8_t error_code;
-	uint8_t buffer[FILE_MAX_READ_ASYNC_BUFFER_LENGTH];
-	uint8_t length_read;
+        PacketHeader header;
+        uint16_t file_id;
+        uint8_t error_code;
+        uint8_t buffer[FILE_MAX_READ_ASYNC_BUFFER_LENGTH];
+        uint8_t length_read;
 } ATTRIBUTE_PACKED AsyncFileReadCallback;
 
 typedef struct {
-	PacketHeader header;
-	uint16_t file_id;
-	uint8_t error_code;
-	uint8_t length_written;
+        PacketHeader header;
+        uint16_t file_id;
+        uint8_t error_code;
+        uint8_t length_written;
 } ATTRIBUTE_PACKED AsyncFileWriteCallback;
 
 typedef struct {
-	PacketHeader header;
-	uint16_t file_id;
-	uint16_t events;
+        PacketHeader header;
+        uint16_t file_id;
+        uint16_t events;
 } ATTRIBUTE_PACKED FileEventsOccurredCallback;
 
 //
@@ -400,64 +400,64 @@ typedef struct {
 //
 
 typedef struct {
-	PacketHeader header;
-	uint16_t name_string_id;
-	uint16_t session_id;
+        PacketHeader header;
+        uint16_t name_string_id;
+        uint16_t session_id;
 } ATTRIBUTE_PACKED OpenDirectoryRequest;
 
 typedef struct {
-	PacketHeader header;
-	uint8_t error_code;
-	uint16_t directory_id;
+        PacketHeader header;
+        uint8_t error_code;
+        uint16_t directory_id;
 } ATTRIBUTE_PACKED OpenDirectoryResponse;
 
 typedef struct {
-	PacketHeader header;
-	uint16_t directory_id;
-	uint16_t session_id;
+        PacketHeader header;
+        uint16_t directory_id;
+        uint16_t session_id;
 } ATTRIBUTE_PACKED GetDirectoryNameRequest;
 
 typedef struct {
-	PacketHeader header;
-	uint8_t error_code;
-	uint16_t name_string_id;
+        PacketHeader header;
+        uint8_t error_code;
+        uint16_t name_string_id;
 } ATTRIBUTE_PACKED GetDirectoryNameResponse;
 
 typedef struct {
-	PacketHeader header;
-	uint16_t directory_id;
-	uint16_t session_id;
+        PacketHeader header;
+        uint16_t directory_id;
+        uint16_t session_id;
 } ATTRIBUTE_PACKED GetNextDirectoryEntryRequest;
 
 typedef struct {
-	PacketHeader header;
-	uint8_t error_code;
-	uint16_t name_string_id;
-	uint8_t type;
+        PacketHeader header;
+        uint8_t error_code;
+        uint16_t name_string_id;
+        uint8_t type;
 } ATTRIBUTE_PACKED GetNextDirectoryEntryResponse;
 
 typedef struct {
-	PacketHeader header;
-	uint16_t directory_id;
+        PacketHeader header;
+        uint16_t directory_id;
 } ATTRIBUTE_PACKED RewindDirectoryRequest;
 
 typedef struct {
-	PacketHeader header;
-	uint8_t error_code;
+        PacketHeader header;
+        uint8_t error_code;
 } ATTRIBUTE_PACKED RewindDirectoryResponse;
 
 typedef struct {
-	PacketHeader header;
-	uint16_t name_string_id;
-	uint32_t flags;
-	uint16_t permissions;
-	uint32_t uid;
-	uint32_t gid;
+        PacketHeader header;
+        uint16_t name_string_id;
+        uint32_t flags;
+        uint16_t permissions;
+        uint32_t uid;
+        uint32_t gid;
 } ATTRIBUTE_PACKED CreateDirectoryRequest;
 
 typedef struct {
-	PacketHeader header;
-	uint8_t error_code;
+        PacketHeader header;
+        uint8_t error_code;
 } ATTRIBUTE_PACKED CreateDirectoryResponse;
 
 //
@@ -465,108 +465,108 @@ typedef struct {
 //
 
 typedef struct {
-	PacketHeader header;
-	uint16_t session_id;
+        PacketHeader header;
+        uint16_t session_id;
 } ATTRIBUTE_PACKED GetProcessesRequest;
 
 typedef struct {
-	PacketHeader header;
-	uint8_t error_code;
-	uint16_t processes_list_id;
+        PacketHeader header;
+        uint8_t error_code;
+        uint16_t processes_list_id;
 } ATTRIBUTE_PACKED GetProcessesResponse;
 
 typedef struct {
-	PacketHeader header;
-	uint16_t executable_string_id;
-	uint16_t arguments_list_id;
-	uint16_t environment_list_id;
-	uint16_t working_directory_string_id;
-	uint32_t uid;
-	uint32_t gid;
-	uint16_t stdin_file_id;
-	uint16_t stdout_file_id;
-	uint16_t stderr_file_id;
-	uint16_t session_id;
+        PacketHeader header;
+        uint16_t executable_string_id;
+        uint16_t arguments_list_id;
+        uint16_t environment_list_id;
+        uint16_t working_directory_string_id;
+        uint32_t uid;
+        uint32_t gid;
+        uint16_t stdin_file_id;
+        uint16_t stdout_file_id;
+        uint16_t stderr_file_id;
+        uint16_t session_id;
 } ATTRIBUTE_PACKED SpawnProcessRequest;
 
 typedef struct {
-	PacketHeader header;
-	uint8_t error_code;
-	uint16_t process_id;
+        PacketHeader header;
+        uint8_t error_code;
+        uint16_t process_id;
 } ATTRIBUTE_PACKED SpawnProcessResponse;
 
 typedef struct {
-	PacketHeader header;
-	uint16_t process_id;
-	uint8_t signal;
+        PacketHeader header;
+        uint16_t process_id;
+        uint8_t signal;
 } ATTRIBUTE_PACKED KillProcessRequest;
 
 typedef struct {
-	PacketHeader header;
-	uint8_t error_code;
+        PacketHeader header;
+        uint8_t error_code;
 } ATTRIBUTE_PACKED KillProcessResponse;
 
 typedef struct {
-	PacketHeader header;
-	uint16_t process_id;
-	uint16_t session_id;
+        PacketHeader header;
+        uint16_t process_id;
+        uint16_t session_id;
 } ATTRIBUTE_PACKED GetProcessCommandRequest;
 
 typedef struct {
-	PacketHeader header;
-	uint8_t error_code;
-	uint16_t executable_string_id;
-	uint16_t arguments_list_id;
-	uint16_t environment_list_id;
-	uint16_t working_directory_string_id;
+        PacketHeader header;
+        uint8_t error_code;
+        uint16_t executable_string_id;
+        uint16_t arguments_list_id;
+        uint16_t environment_list_id;
+        uint16_t working_directory_string_id;
 } ATTRIBUTE_PACKED GetProcessCommandResponse;
 
 typedef struct {
-	PacketHeader header;
-	uint16_t process_id;
+        PacketHeader header;
+        uint16_t process_id;
 } ATTRIBUTE_PACKED GetProcessIdentityRequest;
 
 typedef struct {
-	PacketHeader header;
-	uint8_t error_code;
-	uint32_t pid;
-	uint32_t uid;
-	uint32_t gid;
+        PacketHeader header;
+        uint8_t error_code;
+        uint32_t pid;
+        uint32_t uid;
+        uint32_t gid;
 } ATTRIBUTE_PACKED GetProcessIdentityResponse;
 
 typedef struct {
-	PacketHeader header;
-	uint16_t process_id;
-	uint16_t session_id;
+        PacketHeader header;
+        uint16_t process_id;
+        uint16_t session_id;
 } ATTRIBUTE_PACKED GetProcessStdioRequest;
 
 typedef struct {
-	PacketHeader header;
-	uint8_t error_code;
-	uint16_t stdin_file_id;
-	uint16_t stdout_file_id;
-	uint16_t stderr_file_id;
+        PacketHeader header;
+        uint8_t error_code;
+        uint16_t stdin_file_id;
+        uint16_t stdout_file_id;
+        uint16_t stderr_file_id;
 } ATTRIBUTE_PACKED GetProcessStdioResponse;
 
 typedef struct {
-	PacketHeader header;
-	uint16_t process_id;
+        PacketHeader header;
+        uint16_t process_id;
 } ATTRIBUTE_PACKED GetProcessStateRequest;
 
 typedef struct {
-	PacketHeader header;
-	uint8_t error_code;
-	uint8_t state;
-	uint64_t timestamp;
-	uint8_t exit_code;
+        PacketHeader header;
+        uint8_t error_code;
+        uint8_t state;
+        uint64_t timestamp;
+        uint8_t exit_code;
 } ATTRIBUTE_PACKED GetProcessStateResponse;
 
 typedef struct {
-	PacketHeader header;
-	uint16_t process_id;
-	uint8_t state;
-	uint64_t timestamp;
-	uint8_t exit_code;
+        PacketHeader header;
+        uint16_t process_id;
+        uint8_t state;
+        uint64_t timestamp;
+        uint8_t exit_code;
 } ATTRIBUTE_PACKED ProcessStateChangedCallback;
 
 //
@@ -574,275 +574,468 @@ typedef struct {
 //
 
 typedef struct {
-	PacketHeader header;
-	uint16_t session_id;
+        PacketHeader header;
+        uint16_t session_id;
 } ATTRIBUTE_PACKED GetProgramsRequest;
 
 typedef struct {
-	PacketHeader header;
-	uint8_t error_code;
-	uint16_t programs_list_id;
+        PacketHeader header;
+        uint8_t error_code;
+        uint16_t programs_list_id;
 } ATTRIBUTE_PACKED GetProgramsResponse;
 
 typedef struct {
-	PacketHeader header;
-	uint16_t identifier_string_id;
-	uint16_t session_id;
+        PacketHeader header;
+        uint16_t identifier_string_id;
+        uint16_t session_id;
 } ATTRIBUTE_PACKED DefineProgramRequest;
 
 typedef struct {
-	PacketHeader header;
-	uint8_t error_code;
-	uint16_t program_id;
+        PacketHeader header;
+        uint8_t error_code;
+        uint16_t program_id;
 } ATTRIBUTE_PACKED DefineProgramResponse;
 
 typedef struct {
-	PacketHeader header;
-	uint16_t program_id;
-	uint32_t cookie;
+        PacketHeader header;
+        uint16_t program_id;
+        uint32_t cookie;
 } ATTRIBUTE_PACKED PurgeProgramRequest;
 
 typedef struct {
-	PacketHeader header;
-	uint8_t error_code;
+        PacketHeader header;
+        uint8_t error_code;
 } ATTRIBUTE_PACKED PurgeProgramResponse;
 
 typedef struct {
-	PacketHeader header;
-	uint16_t program_id;
-	uint16_t session_id;
+        PacketHeader header;
+        uint16_t program_id;
+        uint16_t session_id;
 } ATTRIBUTE_PACKED GetProgramIdentifierRequest;
 
 typedef struct {
-	PacketHeader header;
-	uint8_t error_code;
-	uint16_t identifier_string_id;
+        PacketHeader header;
+        uint8_t error_code;
+        uint16_t identifier_string_id;
 } ATTRIBUTE_PACKED GetProgramIdentifierResponse;
 
 typedef struct {
-	PacketHeader header;
-	uint16_t program_id;
-	uint16_t session_id;
+        PacketHeader header;
+        uint16_t program_id;
+        uint16_t session_id;
 } ATTRIBUTE_PACKED GetProgramRootDirectoryRequest;
 
 typedef struct {
-	PacketHeader header;
-	uint8_t error_code;
-	uint16_t root_directory_string_id;
+        PacketHeader header;
+        uint8_t error_code;
+        uint16_t root_directory_string_id;
 } ATTRIBUTE_PACKED GetProgramRootDirectoryResponse;
 
 typedef struct {
-	PacketHeader header;
-	uint16_t program_id;
-	uint16_t executable_string_id;
-	uint16_t arguments_list_id;
-	uint16_t environment_list_id;
-	uint16_t working_directory_string_id;
+        PacketHeader header;
+        uint16_t program_id;
+        uint16_t executable_string_id;
+        uint16_t arguments_list_id;
+        uint16_t environment_list_id;
+        uint16_t working_directory_string_id;
 } ATTRIBUTE_PACKED SetProgramCommandRequest;
 
 typedef struct {
-	PacketHeader header;
-	uint8_t error_code;
+        PacketHeader header;
+        uint8_t error_code;
 } ATTRIBUTE_PACKED SetProgramCommandResponse;
 
 typedef struct {
-	PacketHeader header;
-	uint16_t program_id;
-	uint16_t session_id;
+        PacketHeader header;
+        uint16_t program_id;
+        uint16_t session_id;
 } ATTRIBUTE_PACKED GetProgramCommandRequest;
 
 typedef struct {
-	PacketHeader header;
-	uint8_t error_code;
-	uint16_t executable_string_id;
-	uint16_t arguments_list_id;
-	uint16_t environment_list_id;
-	uint16_t working_directory_string_id;
+        PacketHeader header;
+        uint8_t error_code;
+        uint16_t executable_string_id;
+        uint16_t arguments_list_id;
+        uint16_t environment_list_id;
+        uint16_t working_directory_string_id;
 } ATTRIBUTE_PACKED GetProgramCommandResponse;
 
 typedef struct {
-	PacketHeader header;
-	uint16_t program_id;
-	uint8_t stdin_redirection;
-	uint16_t stdin_file_name_string_id;
-	uint8_t stdout_redirection;
-	uint16_t stdout_file_name_string_id;
-	uint8_t stderr_redirection;
-	uint16_t stderr_file_name_string_id;
+        PacketHeader header;
+        uint16_t program_id;
+        uint8_t stdin_redirection;
+        uint16_t stdin_file_name_string_id;
+        uint8_t stdout_redirection;
+        uint16_t stdout_file_name_string_id;
+        uint8_t stderr_redirection;
+        uint16_t stderr_file_name_string_id;
 } ATTRIBUTE_PACKED SetProgramStdioRedirectionRequest;
 
 typedef struct {
-	PacketHeader header;
-	uint8_t error_code;
+        PacketHeader header;
+        uint8_t error_code;
 } ATTRIBUTE_PACKED SetProgramStdioRedirectionResponse;
 
 typedef struct {
-	PacketHeader header;
-	uint16_t program_id;
-	uint16_t session_id;
+        PacketHeader header;
+        uint16_t program_id;
+        uint16_t session_id;
 } ATTRIBUTE_PACKED GetProgramStdioRedirectionRequest;
 
 typedef struct {
-	PacketHeader header;
-	uint8_t error_code;
-	uint8_t stdin_redirection;
-	uint16_t stdin_file_name_string_id;
-	uint8_t stdout_redirection;
-	uint16_t stdout_file_name_string_id;
-	uint8_t stderr_redirection;
-	uint16_t stderr_file_name_string_id;
+        PacketHeader header;
+        uint8_t error_code;
+        uint8_t stdin_redirection;
+        uint16_t stdin_file_name_string_id;
+        uint8_t stdout_redirection;
+        uint16_t stdout_file_name_string_id;
+        uint8_t stderr_redirection;
+        uint16_t stderr_file_name_string_id;
 } ATTRIBUTE_PACKED GetProgramStdioRedirectionResponse;
 
 typedef struct {
-	PacketHeader header;
-	uint16_t program_id;
-	uint8_t start_mode;
-	tfpbool continue_after_error;
-	uint32_t start_interval;
-	uint16_t start_fields_string_id;
+        PacketHeader header;
+        uint16_t program_id;
+        uint8_t start_mode;
+        tfpbool continue_after_error;
+        uint32_t start_interval;
+        uint16_t start_fields_string_id;
 } ATTRIBUTE_PACKED SetProgramScheduleRequest;
 
 typedef struct {
-	PacketHeader header;
-	uint8_t error_code;
+        PacketHeader header;
+        uint8_t error_code;
 } ATTRIBUTE_PACKED SetProgramScheduleResponse;
 
 typedef struct {
-	PacketHeader header;
-	uint16_t program_id;
-	uint16_t session_id;
+        PacketHeader header;
+        uint16_t program_id;
+        uint16_t session_id;
 } ATTRIBUTE_PACKED GetProgramScheduleRequest;
 
 typedef struct {
-	PacketHeader header;
-	uint8_t error_code;
-	uint8_t start_mode;
-	tfpbool continue_after_error;
-	uint32_t start_interval;
-	uint16_t start_fields_string_id;
+        PacketHeader header;
+        uint8_t error_code;
+        uint8_t start_mode;
+        tfpbool continue_after_error;
+        uint32_t start_interval;
+        uint16_t start_fields_string_id;
 } ATTRIBUTE_PACKED GetProgramScheduleResponse;
 
 typedef struct {
-	PacketHeader header;
-	uint16_t program_id;
-	uint16_t session_id;
+        PacketHeader header;
+        uint16_t program_id;
+        uint16_t session_id;
 } ATTRIBUTE_PACKED GetProgramSchedulerStateRequest;
 
 typedef struct {
-	PacketHeader header;
-	uint8_t error_code;
-	uint8_t state;
-	uint64_t timestamp;
-	uint16_t message_string_id;
+        PacketHeader header;
+        uint8_t error_code;
+        uint8_t state;
+        uint64_t timestamp;
+        uint16_t message_string_id;
 } ATTRIBUTE_PACKED GetProgramSchedulerStateResponse;
 
 typedef struct {
-	PacketHeader header;
-	uint16_t program_id;
+        PacketHeader header;
+        uint16_t program_id;
 } ATTRIBUTE_PACKED ContinueProgramScheduleRequest;
 
 typedef struct {
-	PacketHeader header;
-	uint8_t error_code;
+        PacketHeader header;
+        uint8_t error_code;
 } ATTRIBUTE_PACKED ContinueProgramScheduleResponse;
 
 typedef struct {
-	PacketHeader header;
-	uint16_t program_id;
+        PacketHeader header;
+        uint16_t program_id;
 } ATTRIBUTE_PACKED StartProgramRequest;
 
 typedef struct {
-	PacketHeader header;
-	uint8_t error_code;
+        PacketHeader header;
+        uint8_t error_code;
 } ATTRIBUTE_PACKED StartProgramResponse;
 
 typedef struct {
-	PacketHeader header;
-	uint16_t program_id;
-	uint16_t session_id;
+        PacketHeader header;
+        uint16_t program_id;
+        uint16_t session_id;
 } ATTRIBUTE_PACKED GetLastSpawnedProgramProcessRequest;
 
 typedef struct {
-	PacketHeader header;
-	uint8_t error_code;
-	uint16_t process_id;
-	uint64_t timestamp;
+        PacketHeader header;
+        uint8_t error_code;
+        uint16_t process_id;
+        uint64_t timestamp;
 } ATTRIBUTE_PACKED GetLastSpawnedProgramProcessResponse;
 
 typedef struct {
-	PacketHeader header;
-	uint16_t program_id;
-	uint16_t session_id;
+        PacketHeader header;
+        uint16_t program_id;
+        uint16_t session_id;
 } ATTRIBUTE_PACKED GetCustomProgramOptionNamesRequest;
 
 typedef struct {
-	PacketHeader header;
-	uint8_t error_code;
-	uint16_t names_list_id;
+        PacketHeader header;
+        uint8_t error_code;
+        uint16_t names_list_id;
 } ATTRIBUTE_PACKED GetCustomProgramOptionNamesResponse;
 
 typedef struct {
-	PacketHeader header;
-	uint16_t program_id;
-	uint16_t name_string_id;
-	uint16_t value_string_id;
+        PacketHeader header;
+        uint16_t program_id;
+        uint16_t name_string_id;
+        uint16_t value_string_id;
 } ATTRIBUTE_PACKED SetCustomProgramOptionValueRequest;
 
 typedef struct {
-	PacketHeader header;
-	uint8_t error_code;
+        PacketHeader header;
+        uint8_t error_code;
 } ATTRIBUTE_PACKED SetCustomProgramOptionValueResponse;
 
 typedef struct {
-	PacketHeader header;
-	uint16_t program_id;
-	uint16_t name_string_id;
-	uint16_t session_id;
+        PacketHeader header;
+        uint16_t program_id;
+        uint16_t name_string_id;
+        uint16_t session_id;
 } ATTRIBUTE_PACKED GetCustomProgramOptionValueRequest;
 
 typedef struct {
-	PacketHeader header;
-	uint8_t error_code;
-	uint16_t value_string_id;
+        PacketHeader header;
+        uint8_t error_code;
+        uint16_t value_string_id;
 } ATTRIBUTE_PACKED GetCustomProgramOptionValueResponse;
 
 typedef struct {
-	PacketHeader header;
-	uint16_t program_id;
-	uint16_t name_string_id;
+        PacketHeader header;
+        uint16_t program_id;
+        uint16_t name_string_id;
 } ATTRIBUTE_PACKED RemoveCustomProgramOptionRequest;
 
 typedef struct {
-	PacketHeader header;
-	uint8_t error_code;
+        PacketHeader header;
+        uint8_t error_code;
 } ATTRIBUTE_PACKED RemoveCustomProgramOptionResponse;
 
 typedef struct {
-	PacketHeader header;
-	uint16_t program_id;
+        PacketHeader header;
+        uint16_t program_id;
 } ATTRIBUTE_PACKED ProgramSchedulerStateChangedCallback;
 
 typedef struct {
-	PacketHeader header;
-	uint16_t program_id;
+        PacketHeader header;
+        uint16_t program_id;
 } ATTRIBUTE_PACKED ProgramProcessSpawnedCallback;
 
+
+//
+// vision
+//
+
+typedef struct {
+        PacketHeader header;
+} ATTRIBUTE_PACKED VisionCameraAvailableRequest;
+
+typedef struct {
+        PacketHeader header;
+        int32_t result;
+} ATTRIBUTE_PACKED VisionCameraAvailableResponse;
+
+typedef struct {
+        PacketHeader header;
+        uint16_t width;
+        uint16_t height;
+} ATTRIBUTE_PACKED VisionPreselectFramesizeRequest;
+
+typedef struct {
+        PacketHeader header;
+        int32_t result;
+} ATTRIBUTE_PACKED VisionPreselectFramesizeResponse;
+
+typedef struct {
+        PacketHeader header;
+} ATTRIBUTE_PACKED VisionStartIdleRequest;
+
+typedef struct {
+        PacketHeader header;
+        int32_t result;
+} ATTRIBUTE_PACKED VisionStartIdleResponse;
+
+typedef struct {
+        PacketHeader header;
+        uint32_t milliseconds;
+} ATTRIBUTE_PACKED VisionSetLatencyRequest;
+
+typedef struct {
+        PacketHeader header;
+        int32_t result;
+} ATTRIBUTE_PACKED VisionSetLatencyResponse;
+
+typedef struct {
+        PacketHeader header;
+} ATTRIBUTE_PACKED VisionGetResolutionRequest;
+
+typedef struct {
+        PacketHeader header;
+        int32_t result;
+        uint16_t width;
+        uint16_t height;
+} ATTRIBUTE_PACKED VisionGetResolutionResponse;
+
+typedef struct {
+        PacketHeader header;
+} ATTRIBUTE_PACKED VisionPauseRequest;
+
+typedef struct {
+        PacketHeader header;
+        int32_t result;
+} ATTRIBUTE_PACKED VisionPauseResponse;
+
+typedef struct {
+        PacketHeader header;
+} ATTRIBUTE_PACKED VisionRestartRequest;
+
+typedef struct {
+        PacketHeader header;
+        int32_t result;
+} ATTRIBUTE_PACKED VisionRestartResponse;
+
+typedef struct {
+        PacketHeader header;
+} ATTRIBUTE_PACKED VisionQuitRequest;
+
+typedef struct {
+        PacketHeader header;
+        int32_t result;
+} ATTRIBUTE_PACKED VisionQuitResponse;
+
+typedef struct {
+        PacketHeader header;
+        int8_t id;
+} ATTRIBUTE_PACKED VisionPauseIDRequest;
+
+typedef struct {
+        PacketHeader header;
+        int32_t result;
+} ATTRIBUTE_PACKED VisionPauseIDResponse;
+
+typedef struct {
+        PacketHeader header;
+        int8_t id;
+} ATTRIBUTE_PACKED VisionRestartIDRequest;
+
+typedef struct {
+        PacketHeader header;
+        int32_t result;
+} ATTRIBUTE_PACKED VisionRestartIDResponse;
+
+typedef struct {
+        PacketHeader header;
+        int8_t id_first;
+        int8_t id_second;
+} ATTRIBUTE_PACKED VisionChainRequest;
+
+typedef struct {
+        PacketHeader header;
+        int32_t result;
+} ATTRIBUTE_PACKED VisionChainResponse;
+
+typedef struct {
+        PacketHeader header;
+        int8_t id;
+        uint8_t min_hue;
+        uint8_t max_hue;
+} ATTRIBUTE_PACKED VisionColormatchStartRequest;
+
+typedef struct {
+        PacketHeader header;
+        int32_t result;
+} ATTRIBUTE_PACKED VisionColormatchStartResponse;
+
+typedef struct {
+        PacketHeader header;
+        int8_t id;
+} ATTRIBUTE_PACKED VisionColormatchStopRequest;
+
+typedef struct {
+        PacketHeader header;
+        int32_t result;
+} ATTRIBUTE_PACKED VisionColormatchStopResponse;
+
+typedef struct {
+        PacketHeader header;
+        int8_t id;
+} ATTRIBUTE_PACKED VisionColormatchGetRequest;
+
+typedef struct {
+        PacketHeader header;
+        int32_t result;
+        uint8_t min_hue;
+        uint8_t max_hue;
+} ATTRIBUTE_PACKED VisionColormatchGetResponse;
+
+typedef struct {
+        PacketHeader header;
+        int8_t id;
+        uint16_t x;
+        uint16_t y;
+} ATTRIBUTE_PACKED VisionColormatchUpdateCallback;
+
+typedef struct {
+        PacketHeader header;
+        int8_t id;
+} ATTRIBUTE_PACKED VisionMotionStartRequest;
+
+typedef struct {
+        PacketHeader header;
+        int32_t result;
+} ATTRIBUTE_PACKED VisionMotionStartResponse;
+
+typedef struct {
+        PacketHeader header;
+        int8_t id;
+        uint16_t x;
+        uint16_t y;
+        uint16_t width;
+        uint16_t height;
+} ATTRIBUTE_PACKED VisionMotionUpdateCallback;
+
+typedef struct {
+        PacketHeader header;
+        int8_t id;
+} ATTRIBUTE_PACKED VisionStreamRequest;
+
+typedef struct {
+        PacketHeader header;
+        int32_t result;
+} ATTRIBUTE_PACKED VisionStreamResponse;
+
+typedef struct {
+        PacketHeader header;
+        int8_t id;
+} ATTRIBUTE_PACKED VisionSnapshotRequest;
+
+typedef struct {
+        PacketHeader header;
+        int32_t result;
+} ATTRIBUTE_PACKED VisionSnapshotResponse;
+
 //
 // misc
 //
 
 typedef struct {
-	PacketHeader header;
+        PacketHeader header;
 } ATTRIBUTE_PACKED GetIdentityRequest;
 
 typedef struct {
-	PacketHeader header;
-	char uid[8];
-	char connected_uid[8];
-	char position;
-	uint8_t hardware_version[3];
-	uint8_t firmware_version[3];
-	uint16_t device_identifier;
+        PacketHeader header;
+        char uid[8];
+        char connected_uid[8];
+        char position;
+        uint8_t hardware_version[3];
+        uint8_t firmware_version[3];
+        uint16_t device_identifier;
 } ATTRIBUTE_PACKED GetIdentityResponse;
 
 #include <daemonlib/packed_end.h>
diff --git a/src/redapid/vision.c b/src/redapid/vision.c
new file mode 100644
index 0000000..069564c
--- /dev/null
+++ b/src/redapid/vision.c
@@ -0,0 +1,158 @@
+#include <stdlib.h>
+#include <errno.h>
+
+//#include <daemonlib/log.h>
+#include <daemonlib/event.h>
+
+#include "api.h"
+#include "vision.h"
+
+#define UNUSED(x) (void) x;
+static int ok(int error_code) {
+    return error_code == API_E_SUCCESS;
+}
+
+void vision_send_colormatch_update_callback(void* object) {
+    ColormatchUpdate* update = (ColormatchUpdate*) object;
+    /*
+    log_debug("VisionDebug: Sending vision update");
+    log_error("Sending vision update");
+    */
+    int message;
+    if (pipe_read(&update->state_change_pipe, &message, sizeof(int)) < 0) {
+        /* log_error("Could not read from state change pipe feature id %d: %s (%d)", */
+        /*           update->feature_id, get_errno_name(errno), errno); */
+
+    }
+
+    else {
+        api_send_vision_colormatch_update_callback(update->id,
+                                                   update->x,
+                                                   update->y);
+    }
+
+    // after the callback is sent, the update object can be removed
+    // from the event queue
+    /*
+    event_remove_source(update->state_change_pipe.read_end,
+                        EVENT_SOURCE_TYPE_GENERIC);
+    */
+}
+
+void colormatch_callback(int8_t id, uint16_t x, uint16_t y, void* context) {
+    UNUSED(context);
+
+    int error_code = 0;
+    ColormatchUpdate* update = NULL;
+    update = calloc(1, sizeof(ColormatchUpdate));
+
+    if (update == NULL) {
+
+        error_code = API_E_NO_FREE_MEMORY;
+
+        /* log_error("Could not allocate colormatch-update object: %s (%d)", */
+        /*           get_errno_name(ENOMEM), ENOMEM); */
+    }
+
+    else {
+        update->id = id;
+        update->x = x;
+        update->y = y;
+    }
+
+    if (ok(error_code)) {
+        if (pipe_create(&update->state_change_pipe, 0) < 0) {
+
+            error_code = api_get_error_code_from_errno();
+
+            /* log_error("Could not create update for colormatch id %d: %s (%d)", */
+            /*           update->feature_id, get_errno_name(errno), errno); */
+        }
+    }
+
+    if (ok(error_code)) {
+        int error_code = event_add_source(update->state_change_pipe.read_end,
+                                           EVENT_SOURCE_TYPE_GENERIC,
+                                           EVENT_READ,
+                                           vision_send_colormatch_update_callback,
+                                           update);
+        if (!ok(error_code)) {
+            /* log_error("Could not add update event for colormatch id %d: %s (%d)", */
+            /*           update->feature_id, get_errno_name(errno), errno); */
+        }
+    }
+
+    if (ok(error_code)) {
+        int message = 1;
+        if (pipe_write(&update->state_change_pipe, &message, sizeof(int)) < 0) {
+            /* log_error("Could not write to state change pipe for feature %d: %s (%d)", */
+            /*           feature_id, get_errno_name(errno), errno); */
+        }
+
+        event_remove_source(update->state_change_pipe.read_end, EVENT_SOURCE_TYPE_GENERIC);
+    }
+
+    /* log_debug("Vision Colormatch: callback add result: %d", error_code); */
+    //return error_code;
+}
+
+void vision_send_motion_update_callback(void* object) {
+    MotionUpdate* update = (MotionUpdate*) object;
+
+    int message;
+    if (pipe_read(&update->state_change_pipe, &message, sizeof(int)) < 0) {
+    }
+
+    else {
+        api_send_vision_motion_update_callback(update->id, update->x, update->y,
+                                               update->width, update->height);
+    }
+}
+
+void motion_callback(int8_t id, uint16_t x, uint16_t y,
+                     uint16_t width, uint16_t height, void* context) {
+    UNUSED(context);
+
+    int error_code = 0;
+    MotionUpdate* update = NULL;
+    update = calloc(1, sizeof(MotionUpdate));
+
+    if (update == NULL) {
+
+        error_code = API_E_NO_FREE_MEMORY;
+    }
+
+    else {
+        update->id = id;
+        update->x = x;
+        update->y = y;
+        update->width = width;
+        update->height = height;
+    }
+
+    if (ok(error_code)) {
+        if (pipe_create(&update->state_change_pipe, 0) < 0) {
+
+            error_code = api_get_error_code_from_errno();
+
+        }
+    }
+
+    if (ok(error_code)) {
+        int error_code = event_add_source(update->state_change_pipe.read_end,
+                                          EVENT_SOURCE_TYPE_GENERIC,
+                                          EVENT_READ,
+                                          vision_send_motion_update_callback,
+                                          update);
+        if (!ok(error_code)) {
+        }
+    }
+
+    if (ok(error_code)) {
+        int message = 1;
+        if (pipe_write(&update->state_change_pipe, &message, sizeof(int)) < 0) {
+        }
+
+        event_remove_source(update->state_change_pipe.read_end, EVENT_SOURCE_TYPE_GENERIC);
+    }
+}
diff --git a/src/redapid/vision.h b/src/redapid/vision.h
new file mode 100644
index 0000000..672340a
--- /dev/null
+++ b/src/redapid/vision.h
@@ -0,0 +1,33 @@
+#ifndef VISION_H
+#define VISION_H
+
+#include <daemonlib/pipe.h>
+
+typedef struct {
+    Object base;
+
+    int32_t id;
+    uint16_t x;
+    uint16_t y;
+
+    Pipe state_change_pipe;
+} ColormatchUpdate;
+
+void colormatch_callback(int8_t id, uint16_t x, uint16_t y, void* context);
+
+typedef struct {
+    Object base;
+
+    int32_t id;
+    uint16_t x;
+    uint16_t y;
+    uint16_t width;
+    uint16_t height;
+
+    Pipe state_change_pipe;
+} MotionUpdate;
+
+void motion_callback(int8_t id, uint16_t x, uint16_t y,
+                     uint16_t width, uint16_t height, void* context);
+
+#endif /* VISION_H */
-- 
2.1.4

